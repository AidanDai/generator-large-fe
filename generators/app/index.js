const path = require('path')
const chalk = require('chalk')
const yosay = require('yosay')
const Generator = require('yeoman-generator')
const utils = require('../utils')

const rootPath = path.resolve(__dirname, '../..')

module.exports = class extends Generator {
	constructor(args, options) {
		super(args, options)

		this.log(yosay(
			'Welcome to the excellent ' + chalk.green('generator-large-fe') + ' generator!'
		))

		this.sourceRoot(rootPath)
		this.install = [
            'react',
            'prop-types',
            'react-dom',
            'react-redux',
            'redux',
            'redux-immutablejs',
            'immutable',
            'react-immutable-proptypes',
            'redux-thunk',
            'redux-logger',
            'babel-runtime',
            'axios',
            'moment',
            'querystring'
        ]
		this.devInstall = []
        this.author = `${this.user.git.name()} ${this.user.git.email()}`
    }

	prompting() {
		return this.prompt([
			{
				type: 'input',
				name: 'name',
				message: 'Please input your application name',
				default: this.appname
			},
			{
				type: 'input',
				name: 'version',
				message: 'Please input your application version',
				default: '0.0.1'
            },
            {
				type: 'confirm',
				name: 'flexible',
				message: 'Enable lib-flexible? see more detail https://github.com/amfe/lib-flexible/tree/master',
				default: true
            },
            {
				type: 'confirm',
				name: 'cssModules',
				message: 'Enable css modules? see more detail https://github.com/css-modules/css-modules',
				default: true
            },
            {
				type: 'confirm',
				name: 'less',
				message: 'Enable less?',
				default: true
			},
			{
				type: 'confirm',
				name: 'postcss',
				message: 'Enable postcss?',
				default: true
			},
			{
				type: 'list',
				name: 'component',
				message: 'Which component package do you want to use?',
				choices: ['antd', 'antd-mobile'],
				default: 'antd'
            },
            {
				type: 'list',
				name: 'server',
				message: 'Which server do you want to use?',
				choices: ['express', 'koa'],
				default: 'express'
            }
		]).then((answers) => {
			this.name = answers.name
            this.version = answers.version
            this.flexible = answers.flexible
			this.cssModules = answers.cssModules
			this.less = answers.less
			this.postcss = answers.postcss
            this.component = answers.component
            this.server = answers.server
		})
	}

	configuring() {
        // set dev
        if (this.flexible) {
            this.install.push('lib-flexible', 'fastclick')
        }

        if (this.less) {
            this.devInstall.push('less', 'less-loader')
        }

		if (this.postcss) {
			this.devInstall.push('postcss-import', 'postcss-px2rem', 'postcss-loader')
		}

		if (this.component === 'ant-design') {
			this.install.push('antd')
		}

		if (this.component === 'ant-design-mobile') {
            this.install.push('antd-mobile')
            this.devInstall.push('svg-sprite-loader')
		}

        // write config
        const configPath = path.join(`${this.sourceRoot(rootPath)}`, 'generators/config.json')
        const config = {
            flexible: this.flexible,
            cssModules: this.cssModules,
            component: this.component,
            server: this.server
        }

        utils.writeJSON(configPath, config)
	}

	writing() {
		const setting = {
			name: this.name,
			version: this.version,
            author: this.author,
            less: this.less,
            postcss: this.postcss,
            flexible: this.flexible,
            cssModules: this.cssModules,
            component: this.component
		}

		this.fs.copyTpl(
			this.templatePath('generators/app/templates/'),
			this.destinationPath('./'),
			setting
		)

		this.fs.copy(
			this.templatePath('generators/app/templates/.*'),
			this.destinationPath('./')
        )

        this.composeWith(require.resolve('../server'), {
            server: this.server
        })

        this.composeWith(require.resolve('../babel'), {
            component: this.component
        })
	}

	install() {
		const devInstall = this.devInstall.concat([
			'add-asset-html-webpack-plugin',	// Add a JavaScript or CSS asset to the HTML generated by html-webpack-plugin
			'assets-webpack-plugin',			// Webpack plugin that emits a json file with assets paths.
			'autoprefixer',						// Parse CSS and add vendor prefixes to rules by Can I Use
			'babel-core',						// Babel compiler core
			'babel-loader',						// Webpack plugin for Babel
			'babel-plugin-import',				// antd 或 antd-mobile 按需加载脚本和样式
			'babel-plugin-transform-runtime',	// 提供 babel-runtime 包供编译模块复用工具函数(https://segmentfault.com/q/1010000005596587)
            'babel-polyfill',					// 给原声 JavaScript 打补丁
			'babel-preset-env',					// 支持 JavaScript 最新特性
			'babel-preset-react',				// 支持 JSX 合 Flow
			'clean-webpack-plugin',				// A webpack plugin to remove your build folder(s) before building
			'cross-env',						// Cross platform setting of environment scripts
			'css-loader',						// css loader module for webpack
            'cssnano',
            'extract-text-webpack-plugin',		// Extract text from bundle into a file.（抽取 css）
			'happypack',						// Happiness in the form of faster webpack build times.
			'html-webpack-plugin',				// Simplifies creation of HTML files to serve your webpack bundles(生成 html 静态文件)
			'image-webpack-loader',				// Image loader module for webpack(Minify PNG, JPEG, GIF and SVG images with imagemin)
            'react-addons-perf',
            'react-hot-loader',     			// Tweak React components in real time.
            'shelljs',
            'style-loader',						// style loader module for webpack
			'url-loader',						// url loader module for webpack(can return a DataURL)
			'webpack',							// A bundler for javascript and friends.
            'webpack-dev-middleware',				// Serves a webpack app. Updates the browser on changes.
            'webpack-hot-middleware'
		])
		const options = {
			'save-dev': true
        }

        // console.log(this.install.sort())
        // console.log(devInstall.sort())
		//this.npmInstall(this.install)
		//this.npmInstall(devInstall, options)
	}
}
