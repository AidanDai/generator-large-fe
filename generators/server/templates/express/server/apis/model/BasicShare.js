/**
 * Mimir
 * APIs
 *
 * OpenAPI spec version: 1.0.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.2.3
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/RichShareContent'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('./RichShareContent'));
  } else {
    // Browser globals (root is window)
    if (!root.Mimir) {
      root.Mimir = {};
    }
    root.Mimir.BasicShare = factory(root.Mimir.ApiClient, root.Mimir.RichShareContent);
  }
}(this, function(ApiClient, RichShareContent) {
  'use strict';




  /**
   * The BasicShare model module.
   * @module model/BasicShare
   * @version 1.0.0
   */

  /**
   * Constructs a new <code>BasicShare</code>.
   * @alias module:model/BasicShare
   * @class
   */
  var exports = function() {
    var _this = this;



















  };

  /**
   * Constructs a <code>BasicShare</code> from a plain JavaScript object, optionally creating a new instance.
   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
   * @param {Object} data The plain JavaScript object bearing properties of interest.
   * @param {module:model/BasicShare} obj Optional instance to populate.
   * @return {module:model/BasicShare} The populated <code>BasicShare</code> instance.
   */
  exports.constructFromObject = function(data, obj) {
    if (data) {
      obj = obj || new exports();

      if (data.hasOwnProperty('id')) {
        obj['id'] = ApiClient.convertToType(data['id'], 'Number');
      }
      if (data.hasOwnProperty('group_id')) {
        obj['group_id'] = ApiClient.convertToType(data['group_id'], 'Number');
      }
      if (data.hasOwnProperty('title')) {
        obj['title'] = ApiClient.convertToType(data['title'], 'String');
      }
      if (data.hasOwnProperty('uid_author')) {
        obj['uid_author'] = ApiClient.convertToType(data['uid_author'], 'String');
      }
      if (data.hasOwnProperty('reply_reference')) {
        obj['reply_reference'] = ApiClient.convertToType(data['reply_reference'], 'String');
      }
      if (data.hasOwnProperty('is_check')) {
        obj['is_check'] = ApiClient.convertToType(data['is_check'], 'Boolean');
      }
      if (data.hasOwnProperty('content_type')) {
        obj['content_type'] = ApiClient.convertToType(data['content_type'], 'String');
      }
      if (data.hasOwnProperty('share_type')) {
        obj['share_type'] = ApiClient.convertToType(data['share_type'], 'String');
      }
      if (data.hasOwnProperty('text')) {
        obj['text'] = ApiClient.convertToType(data['text'], 'String');
      }
      if (data.hasOwnProperty('links')) {
        obj['links'] = ApiClient.convertToType(data['links'], [RichShareContent]);
      }
      if (data.hasOwnProperty('related_id')) {
        obj['related_id'] = ApiClient.convertToType(data['related_id'], 'Number');
      }
      if (data.hasOwnProperty('parent_id')) {
        obj['parent_id'] = ApiClient.convertToType(data['parent_id'], 'Number');
      }
      if (data.hasOwnProperty('is_recommended')) {
        obj['is_recommended'] = ApiClient.convertToType(data['is_recommended'], 'Boolean');
      }
      if (data.hasOwnProperty('is_from_leader')) {
        obj['is_from_leader'] = ApiClient.convertToType(data['is_from_leader'], 'Boolean');
      }
      if (data.hasOwnProperty('is_top')) {
        obj['is_top'] = ApiClient.convertToType(data['is_top'], 'Boolean');
      }
      if (data.hasOwnProperty('created_at')) {
        obj['created_at'] = ApiClient.convertToType(data['created_at'], 'Date');
      }
      if (data.hasOwnProperty('question_content')) {
        obj['question_content'] = ApiClient.convertToType(data['question_content'], 'String');
      }
      if (data.hasOwnProperty('words_num')) {
        obj['words_num'] = ApiClient.convertToType(data['words_num'], 'Number');
      }
    }
    return obj;
  }

  /**
   * @member {Number} id
   */
  exports.prototype['id'] = undefined;
  /**
   * @member {Number} group_id
   */
  exports.prototype['group_id'] = undefined;
  /**
   * @member {String} title
   * @default ''
   */
  exports.prototype['title'] = '';
  /**
   * @member {String} uid_author
   * @default ''
   */
  exports.prototype['uid_author'] = '';
  /**
   * @member {String} reply_reference
   * @default ''
   */
  exports.prototype['reply_reference'] = '';
  /**
   * @member {Boolean} is_check
   * @default true
   */
  exports.prototype['is_check'] = true;
  /**
   * @member {module:model/BasicShare.ContentTypeEnum} content_type
   */
  exports.prototype['content_type'] = undefined;
  /**
   * @member {module:model/BasicShare.ShareTypeEnum} share_type
   */
  exports.prototype['share_type'] = undefined;
  /**
   * @member {String} text
   * @default ''
   */
  exports.prototype['text'] = '';
  /**
   * @member {Array.<module:model/RichShareContent>} links
   */
  exports.prototype['links'] = undefined;
  /**
   * @member {Number} related_id
   */
  exports.prototype['related_id'] = undefined;
  /**
   * @member {Number} parent_id
   */
  exports.prototype['parent_id'] = undefined;
  /**
   * @member {Boolean} is_recommended
   */
  exports.prototype['is_recommended'] = undefined;
  /**
   * @member {Boolean} is_from_leader
   */
  exports.prototype['is_from_leader'] = undefined;
  /**
   * @member {Boolean} is_top
   */
  exports.prototype['is_top'] = undefined;
  /**
   * @member {Date} created_at
   */
  exports.prototype['created_at'] = undefined;
  /**
   * @member {String} question_content
   * @default ''
   */
  exports.prototype['question_content'] = '';
  /**
   * @member {Number} words_num
   */
  exports.prototype['words_num'] = undefined;


  /**
   * Allowed values for the <code>content_type</code> property.
   * @enum {String}
   * @readonly
   */
  exports.ContentTypeEnum = {
    /**
     * value: "text"
     * @const
     */
    "text": "text",
    /**
     * value: "image"
     * @const
     */
    "image": "image",
    /**
     * value: "voice"
     * @const
     */
    "voice": "voice",
    /**
     * value: "link"
     * @const
     */
    "link": "link",
    /**
     * value: "video"
     * @const
     */
    "video": "video"  };

  /**
   * Allowed values for the <code>share_type</code> property.
   * @enum {String}
   * @readonly
   */
  exports.ShareTypeEnum = {
    /**
     * value: "share"
     * @const
     */
    "share": "share",
    /**
     * value: "up"
     * @const
     */
    "up": "up",
    /**
     * value: "down"
     * @const
     */
    "down": "down",
    /**
     * value: "reply"
     * @const
     */
    "reply": "reply",
    /**
     * value: "award"
     * @const
     */
    "award": "award"  };


  return exports;
}));


