/**
 * Mimir
 * APIs
 *
 * OpenAPI spec version: 1.0.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.2.3
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/Error', 'model/QuestionRequest', 'model/QuestionResponse', 'model/ShareItem', 'model/Success'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../model/Error'), require('../model/QuestionRequest'), require('../model/QuestionResponse'), require('../model/ShareItem'), require('../model/Success'));
  } else {
    // Browser globals (root is window)
    if (!root.Mimir) {
      root.Mimir = {};
    }
    root.Mimir.QuestionApi = factory(root.Mimir.ApiClient, root.Mimir.Error, root.Mimir.QuestionRequest, root.Mimir.QuestionResponse, root.Mimir.ShareItem, root.Mimir.Success);
  }
}(this, function(ApiClient, Error, QuestionRequest, QuestionResponse, ShareItem, Success) {
  'use strict';

  /**
   * Question service.
   * @module api/QuestionApi
   * @version 1.0.0
   */

  /**
   * Constructs a new QuestionApi. 
   * @alias module:api/QuestionApi
   * @class
   * @param {module:ApiClient} apiClient Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;


    /**
     * Callback function to receive the result of the groupGroupIdAnswersGet operation.
     * @callback module:api/QuestionApi~groupGroupIdAnswersGetCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/ShareItem>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Number} groupId 
     * @param {Object} opts Optional parameters
     * @param {String} opts.authorization  (default to )
     * @param {Number} opts.limit max records to return (default to 20)
     * @param {Number} opts.page page number (default to 1)
     * @param {module:api/QuestionApi~groupGroupIdAnswersGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/ShareItem>}
     */
    this.groupGroupIdAnswersGet = function(groupId, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'groupId' is set
      if (groupId === undefined || groupId === null) {
        throw new Error("Missing the required parameter 'groupId' when calling groupGroupIdAnswersGet");
      }


      var pathParams = {
        'group_id': groupId
      };
      var queryParams = {
        'limit': opts['limit'],
        'page': opts['page']
      };
      var headerParams = {
        'Authorization': opts['authorization']
      };
      var formParams = {
      };

      var authNames = ['web'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = [ShareItem];

      return this.apiClient.callApi(
        '/group/{group_id}/answers', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the groupGroupIdQuestionsGet operation.
     * @callback module:api/QuestionApi~groupGroupIdQuestionsGetCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/QuestionResponse>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Number} groupId 
     * @param {Object} opts Optional parameters
     * @param {String} opts.authorization  (default to )
     * @param {Number} opts.limit max records to return (default to 20)
     * @param {Number} opts.page page number (default to 1)
     * @param {module:api/QuestionApi~groupGroupIdQuestionsGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/QuestionResponse>}
     */
    this.groupGroupIdQuestionsGet = function(groupId, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'groupId' is set
      if (groupId === undefined || groupId === null) {
        throw new Error("Missing the required parameter 'groupId' when calling groupGroupIdQuestionsGet");
      }


      var pathParams = {
        'group_id': groupId
      };
      var queryParams = {
        'limit': opts['limit'],
        'page': opts['page']
      };
      var headerParams = {
        'Authorization': opts['authorization']
      };
      var formParams = {
      };

      var authNames = ['web'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = [QuestionResponse];

      return this.apiClient.callApi(
        '/group/{group_id}/questions', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the groupGroupIdQuestionsPost operation.
     * @callback module:api/QuestionApi~groupGroupIdQuestionsPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/QuestionResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Number} groupId 
     * @param {module:model/QuestionRequest} question 
     * @param {Object} opts Optional parameters
     * @param {String} opts.authorization  (default to )
     * @param {module:api/QuestionApi~groupGroupIdQuestionsPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/QuestionResponse}
     */
    this.groupGroupIdQuestionsPost = function(groupId, question, opts, callback) {
      opts = opts || {};
      var postBody = question;

      // verify the required parameter 'groupId' is set
      if (groupId === undefined || groupId === null) {
        throw new Error("Missing the required parameter 'groupId' when calling groupGroupIdQuestionsPost");
      }

      // verify the required parameter 'question' is set
      if (question === undefined || question === null) {
        throw new Error("Missing the required parameter 'question' when calling groupGroupIdQuestionsPost");
      }


      var pathParams = {
        'group_id': groupId
      };
      var queryParams = {
      };
      var headerParams = {
        'Authorization': opts['authorization']
      };
      var formParams = {
      };

      var authNames = ['web'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = QuestionResponse;

      return this.apiClient.callApi(
        '/group/{group_id}/questions', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the questionQuestionIdDelete operation.
     * @callback module:api/QuestionApi~questionQuestionIdDeleteCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Success} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Number} questionId 
     * @param {Object} opts Optional parameters
     * @param {String} opts.authorization  (default to )
     * @param {String} opts.reason 
     * @param {module:api/QuestionApi~questionQuestionIdDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Success}
     */
    this.questionQuestionIdDelete = function(questionId, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'questionId' is set
      if (questionId === undefined || questionId === null) {
        throw new Error("Missing the required parameter 'questionId' when calling questionQuestionIdDelete");
      }


      var pathParams = {
        'question_id': questionId
      };
      var queryParams = {
        'reason': opts['reason']
      };
      var headerParams = {
        'Authorization': opts['authorization']
      };
      var formParams = {
      };

      var authNames = ['web'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = Success;

      return this.apiClient.callApi(
        '/question/{question_id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the questionQuestionIdGet operation.
     * @callback module:api/QuestionApi~questionQuestionIdGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/QuestionResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Number} questionId 
     * @param {Object} opts Optional parameters
     * @param {String} opts.authorization  (default to )
     * @param {module:api/QuestionApi~questionQuestionIdGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/QuestionResponse}
     */
    this.questionQuestionIdGet = function(questionId, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'questionId' is set
      if (questionId === undefined || questionId === null) {
        throw new Error("Missing the required parameter 'questionId' when calling questionQuestionIdGet");
      }


      var pathParams = {
        'question_id': questionId
      };
      var queryParams = {
      };
      var headerParams = {
        'Authorization': opts['authorization']
      };
      var formParams = {
      };

      var authNames = ['web'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = QuestionResponse;

      return this.apiClient.callApi(
        '/question/{question_id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the questionQuestionIdUpDelete operation.
     * @callback module:api/QuestionApi~questionQuestionIdUpDeleteCallback
     * @param {String} error Error message, if any.
     * @param {module:model/QuestionResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Number} questionId 
     * @param {Object} opts Optional parameters
     * @param {String} opts.authorization  (default to )
     * @param {module:api/QuestionApi~questionQuestionIdUpDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/QuestionResponse}
     */
    this.questionQuestionIdUpDelete = function(questionId, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'questionId' is set
      if (questionId === undefined || questionId === null) {
        throw new Error("Missing the required parameter 'questionId' when calling questionQuestionIdUpDelete");
      }


      var pathParams = {
        'question_id': questionId
      };
      var queryParams = {
      };
      var headerParams = {
        'Authorization': opts['authorization']
      };
      var formParams = {
      };

      var authNames = ['web'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = QuestionResponse;

      return this.apiClient.callApi(
        '/question/{question_id}/up', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the questionQuestionIdUpPost operation.
     * @callback module:api/QuestionApi~questionQuestionIdUpPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/QuestionResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Number} questionId 
     * @param {Object} opts Optional parameters
     * @param {String} opts.authorization  (default to )
     * @param {module:api/QuestionApi~questionQuestionIdUpPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/QuestionResponse}
     */
    this.questionQuestionIdUpPost = function(questionId, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'questionId' is set
      if (questionId === undefined || questionId === null) {
        throw new Error("Missing the required parameter 'questionId' when calling questionQuestionIdUpPost");
      }


      var pathParams = {
        'question_id': questionId
      };
      var queryParams = {
      };
      var headerParams = {
        'Authorization': opts['authorization']
      };
      var formParams = {
      };

      var authNames = ['web'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = QuestionResponse;

      return this.apiClient.callApi(
        '/question/{question_id}/up', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the userUidGroupGroupIdReadQuestionsPost operation.
     * @callback module:api/QuestionApi~userUidGroupGroupIdReadQuestionsPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Success} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} uid 
     * @param {Number} groupId 
     * @param {Object} opts Optional parameters
     * @param {String} opts.authorization  (default to )
     * @param {module:api/QuestionApi~userUidGroupGroupIdReadQuestionsPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Success}
     */
    this.userUidGroupGroupIdReadQuestionsPost = function(uid, groupId, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'uid' is set
      if (uid === undefined || uid === null) {
        throw new Error("Missing the required parameter 'uid' when calling userUidGroupGroupIdReadQuestionsPost");
      }

      // verify the required parameter 'groupId' is set
      if (groupId === undefined || groupId === null) {
        throw new Error("Missing the required parameter 'groupId' when calling userUidGroupGroupIdReadQuestionsPost");
      }


      var pathParams = {
        'uid': uid,
        'group_id': groupId
      };
      var queryParams = {
      };
      var headerParams = {
        'Authorization': opts['authorization']
      };
      var formParams = {
      };

      var authNames = ['web'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = Success;

      return this.apiClient.callApi(
        '/user/{uid}/group/{group_id}/read_questions', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
  };

  return exports;
}));
