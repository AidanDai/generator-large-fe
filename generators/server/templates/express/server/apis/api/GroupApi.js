/**
 * Mimir
 * APIs
 *
 * OpenAPI spec version: 1.0.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.2.3
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/ApplicationRequest', 'model/ApplicationResponse', 'model/Error', 'model/FreeReadRequest', 'model/GroupChargeResponse', 'model/GroupCheckRequest', 'model/GroupCheckResponse', 'model/GroupRequest', 'model/GroupResponse', 'model/GroupResponseCanEmpty', 'model/GroupShareItem', 'model/GroupSummaryRequest', 'model/InlineResponse200', 'model/MemberAllStatisticsResponse', 'model/MemberResponse', 'model/MemberStatisticsResponse', 'model/MemberUserResponse', 'model/MemberWithReplyCountResponse', 'model/PrisonerRequest', 'model/RankResponse', 'model/ShareCard', 'model/SubscribeRequest', 'model/SubscribeResponse', 'model/Success'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../model/ApplicationRequest'), require('../model/ApplicationResponse'), require('../model/Error'), require('../model/FreeReadRequest'), require('../model/GroupChargeResponse'), require('../model/GroupCheckRequest'), require('../model/GroupCheckResponse'), require('../model/GroupRequest'), require('../model/GroupResponse'), require('../model/GroupResponseCanEmpty'), require('../model/GroupShareItem'), require('../model/GroupSummaryRequest'), require('../model/InlineResponse200'), require('../model/MemberAllStatisticsResponse'), require('../model/MemberResponse'), require('../model/MemberStatisticsResponse'), require('../model/MemberUserResponse'), require('../model/MemberWithReplyCountResponse'), require('../model/PrisonerRequest'), require('../model/RankResponse'), require('../model/ShareCard'), require('../model/SubscribeRequest'), require('../model/SubscribeResponse'), require('../model/Success'));
  } else {
    // Browser globals (root is window)
    if (!root.Mimir) {
      root.Mimir = {};
    }
    root.Mimir.GroupApi = factory(root.Mimir.ApiClient, root.Mimir.ApplicationRequest, root.Mimir.ApplicationResponse, root.Mimir.Error, root.Mimir.FreeReadRequest, root.Mimir.GroupChargeResponse, root.Mimir.GroupCheckRequest, root.Mimir.GroupCheckResponse, root.Mimir.GroupRequest, root.Mimir.GroupResponse, root.Mimir.GroupResponseCanEmpty, root.Mimir.GroupShareItem, root.Mimir.GroupSummaryRequest, root.Mimir.InlineResponse200, root.Mimir.MemberAllStatisticsResponse, root.Mimir.MemberResponse, root.Mimir.MemberStatisticsResponse, root.Mimir.MemberUserResponse, root.Mimir.MemberWithReplyCountResponse, root.Mimir.PrisonerRequest, root.Mimir.RankResponse, root.Mimir.ShareCard, root.Mimir.SubscribeRequest, root.Mimir.SubscribeResponse, root.Mimir.Success);
  }
}(this, function(ApiClient, ApplicationRequest, ApplicationResponse, Error, FreeReadRequest, GroupChargeResponse, GroupCheckRequest, GroupCheckResponse, GroupRequest, GroupResponse, GroupResponseCanEmpty, GroupShareItem, GroupSummaryRequest, InlineResponse200, MemberAllStatisticsResponse, MemberResponse, MemberStatisticsResponse, MemberUserResponse, MemberWithReplyCountResponse, PrisonerRequest, RankResponse, ShareCard, SubscribeRequest, SubscribeResponse, Success) {
  'use strict';

  /**
   * Group service.
   * @module api/GroupApi
   * @version 1.0.0
   */

  /**
   * Constructs a new GroupApi. 
   * @alias module:api/GroupApi
   * @class
   * @param {module:ApiClient} apiClient Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;


    /**
     * Callback function to receive the result of the applicationApplicationIdDelete operation.
     * @callback module:api/GroupApi~applicationApplicationIdDeleteCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ApplicationResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Number} applicationId 
     * @param {Object} opts Optional parameters
     * @param {String} opts.authorization  (default to )
     * @param {module:api/GroupApi~applicationApplicationIdDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ApplicationResponse}
     */
    this.applicationApplicationIdDelete = function(applicationId, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'applicationId' is set
      if (applicationId === undefined || applicationId === null) {
        throw new Error("Missing the required parameter 'applicationId' when calling applicationApplicationIdDelete");
      }


      var pathParams = {
        'application_id': applicationId
      };
      var queryParams = {
      };
      var headerParams = {
        'Authorization': opts['authorization']
      };
      var formParams = {
      };

      var authNames = ['web'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = ApplicationResponse;

      return this.apiClient.callApi(
        '/application/{application_id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the applicationApplicationIdGet operation.
     * @callback module:api/GroupApi~applicationApplicationIdGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ApplicationResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Number} applicationId 
     * @param {Object} opts Optional parameters
     * @param {String} opts.authorization  (default to )
     * @param {module:api/GroupApi~applicationApplicationIdGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ApplicationResponse}
     */
    this.applicationApplicationIdGet = function(applicationId, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'applicationId' is set
      if (applicationId === undefined || applicationId === null) {
        throw new Error("Missing the required parameter 'applicationId' when calling applicationApplicationIdGet");
      }


      var pathParams = {
        'application_id': applicationId
      };
      var queryParams = {
      };
      var headerParams = {
        'Authorization': opts['authorization']
      };
      var formParams = {
      };

      var authNames = ['web'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = ApplicationResponse;

      return this.apiClient.callApi(
        '/application/{application_id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the applicationApplicationIdPut operation.
     * @callback module:api/GroupApi~applicationApplicationIdPutCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ApplicationResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {module:model/ApplicationRequest} application 
     * @param {Number} applicationId 
     * @param {Object} opts Optional parameters
     * @param {String} opts.authorization  (default to )
     * @param {module:api/GroupApi~applicationApplicationIdPutCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ApplicationResponse}
     */
    this.applicationApplicationIdPut = function(application, applicationId, opts, callback) {
      opts = opts || {};
      var postBody = application;

      // verify the required parameter 'application' is set
      if (application === undefined || application === null) {
        throw new Error("Missing the required parameter 'application' when calling applicationApplicationIdPut");
      }

      // verify the required parameter 'applicationId' is set
      if (applicationId === undefined || applicationId === null) {
        throw new Error("Missing the required parameter 'applicationId' when calling applicationApplicationIdPut");
      }


      var pathParams = {
        'application_id': applicationId
      };
      var queryParams = {
      };
      var headerParams = {
        'Authorization': opts['authorization']
      };
      var formParams = {
      };

      var authNames = ['web'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = ApplicationResponse;

      return this.apiClient.callApi(
        '/application/{application_id}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the applicationsGet operation.
     * @callback module:api/GroupApi~applicationsGetCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/ApplicationResponse>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} uid 
     * @param {Object} opts Optional parameters
     * @param {String} opts.authorization  (default to )
     * @param {Number} opts.limit max records to return (default to 20)
     * @param {Number} opts.page page number (default to 1)
     * @param {String} opts.status 
     * @param {module:api/GroupApi~applicationsGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/ApplicationResponse>}
     */
    this.applicationsGet = function(uid, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'uid' is set
      if (uid === undefined || uid === null) {
        throw new Error("Missing the required parameter 'uid' when calling applicationsGet");
      }


      var pathParams = {
      };
      var queryParams = {
        'limit': opts['limit'],
        'page': opts['page'],
        'uid': uid,
        'status': opts['status']
      };
      var headerParams = {
        'Authorization': opts['authorization']
      };
      var formParams = {
      };

      var authNames = ['web'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = [ApplicationResponse];

      return this.apiClient.callApi(
        '/applications', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the applicationsPost operation.
     * @callback module:api/GroupApi~applicationsPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ApplicationResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {module:model/ApplicationRequest} application 
     * @param {Object} opts Optional parameters
     * @param {String} opts.authorization  (default to )
     * @param {module:api/GroupApi~applicationsPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ApplicationResponse}
     */
    this.applicationsPost = function(application, opts, callback) {
      opts = opts || {};
      var postBody = application;

      // verify the required parameter 'application' is set
      if (application === undefined || application === null) {
        throw new Error("Missing the required parameter 'application' when calling applicationsPost");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var headerParams = {
        'Authorization': opts['authorization']
      };
      var formParams = {
      };

      var authNames = ['web'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = ApplicationResponse;

      return this.apiClient.callApi(
        '/applications', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the groupGroupIdChargeGet operation.
     * @callback module:api/GroupApi~groupGroupIdChargeGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GroupChargeResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Number} groupId 
     * @param {Object} opts Optional parameters
     * @param {String} opts.authorization  (default to )
     * @param {Number} opts.price 
     * @param {module:api/GroupApi~groupGroupIdChargeGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GroupChargeResponse}
     */
    this.groupGroupIdChargeGet = function(groupId, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'groupId' is set
      if (groupId === undefined || groupId === null) {
        throw new Error("Missing the required parameter 'groupId' when calling groupGroupIdChargeGet");
      }


      var pathParams = {
        'group_id': groupId
      };
      var queryParams = {
        'price': opts['price']
      };
      var headerParams = {
        'Authorization': opts['authorization']
      };
      var formParams = {
      };

      var authNames = ['web'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = GroupChargeResponse;

      return this.apiClient.callApi(
        '/group/{group_id}/charge', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the groupGroupIdCheckGet operation.
     * @callback module:api/GroupApi~groupGroupIdCheckGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GroupCheckResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Number} groupId 
     * @param {Object} opts Optional parameters
     * @param {String} opts.authorization  (default to )
     * @param {module:api/GroupApi~groupGroupIdCheckGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GroupCheckResponse}
     */
    this.groupGroupIdCheckGet = function(groupId, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'groupId' is set
      if (groupId === undefined || groupId === null) {
        throw new Error("Missing the required parameter 'groupId' when calling groupGroupIdCheckGet");
      }


      var pathParams = {
        'group_id': groupId
      };
      var queryParams = {
      };
      var headerParams = {
        'Authorization': opts['authorization']
      };
      var formParams = {
      };

      var authNames = ['web'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = GroupCheckResponse;

      return this.apiClient.callApi(
        '/group/{group_id}/check', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the groupGroupIdCheckPost operation.
     * @callback module:api/GroupApi~groupGroupIdCheckPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Success} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {module:model/GroupCheckRequest} group 
     * @param {Number} groupId 
     * @param {Object} opts Optional parameters
     * @param {String} opts.authorization  (default to )
     * @param {module:api/GroupApi~groupGroupIdCheckPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Success}
     */
    this.groupGroupIdCheckPost = function(group, groupId, opts, callback) {
      opts = opts || {};
      var postBody = group;

      // verify the required parameter 'group' is set
      if (group === undefined || group === null) {
        throw new Error("Missing the required parameter 'group' when calling groupGroupIdCheckPost");
      }

      // verify the required parameter 'groupId' is set
      if (groupId === undefined || groupId === null) {
        throw new Error("Missing the required parameter 'groupId' when calling groupGroupIdCheckPost");
      }


      var pathParams = {
        'group_id': groupId
      };
      var queryParams = {
      };
      var headerParams = {
        'Authorization': opts['authorization']
      };
      var formParams = {
      };

      var authNames = ['web'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = Success;

      return this.apiClient.callApi(
        '/group/{group_id}/check', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the groupGroupIdFreeReadCountPost operation.
     * @callback module:api/GroupApi~groupGroupIdFreeReadCountPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Success} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Number} groupId 
     * @param {module:model/FreeReadRequest} count 
     * @param {Object} opts Optional parameters
     * @param {String} opts.authorization  (default to )
     * @param {module:api/GroupApi~groupGroupIdFreeReadCountPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Success}
     */
    this.groupGroupIdFreeReadCountPost = function(groupId, count, opts, callback) {
      opts = opts || {};
      var postBody = count;

      // verify the required parameter 'groupId' is set
      if (groupId === undefined || groupId === null) {
        throw new Error("Missing the required parameter 'groupId' when calling groupGroupIdFreeReadCountPost");
      }

      // verify the required parameter 'count' is set
      if (count === undefined || count === null) {
        throw new Error("Missing the required parameter 'count' when calling groupGroupIdFreeReadCountPost");
      }


      var pathParams = {
        'group_id': groupId
      };
      var queryParams = {
      };
      var headerParams = {
        'Authorization': opts['authorization']
      };
      var formParams = {
      };

      var authNames = ['web'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = Success;

      return this.apiClient.callApi(
        '/group/{group_id}/free_read_count', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the groupGroupIdGet operation.
     * @callback module:api/GroupApi~groupGroupIdGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GroupResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Number} groupId 
     * @param {Object} opts Optional parameters
     * @param {String} opts.authorization  (default to )
     * @param {module:api/GroupApi~groupGroupIdGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GroupResponse}
     */
    this.groupGroupIdGet = function(groupId, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'groupId' is set
      if (groupId === undefined || groupId === null) {
        throw new Error("Missing the required parameter 'groupId' when calling groupGroupIdGet");
      }


      var pathParams = {
        'group_id': groupId
      };
      var queryParams = {
      };
      var headerParams = {
        'Authorization': opts['authorization']
      };
      var formParams = {
      };

      var authNames = ['web'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = GroupResponse;

      return this.apiClient.callApi(
        '/group/{group_id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the groupGroupIdMemberDelete operation.
     * @callback module:api/GroupApi~groupGroupIdMemberDeleteCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Success} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Number} groupId 
     * @param {Object} opts Optional parameters
     * @param {String} opts.authorization  (default to )
     * @param {module:api/GroupApi~groupGroupIdMemberDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Success}
     */
    this.groupGroupIdMemberDelete = function(groupId, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'groupId' is set
      if (groupId === undefined || groupId === null) {
        throw new Error("Missing the required parameter 'groupId' when calling groupGroupIdMemberDelete");
      }


      var pathParams = {
        'group_id': groupId
      };
      var queryParams = {
      };
      var headerParams = {
        'Authorization': opts['authorization']
      };
      var formParams = {
      };

      var authNames = ['web'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = Success;

      return this.apiClient.callApi(
        '/group/{group_id}/member', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the groupGroupIdMemberGet operation.
     * @callback module:api/GroupApi~groupGroupIdMemberGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/MemberWithReplyCountResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Number} groupId 
     * @param {Object} opts Optional parameters
     * @param {String} opts.authorization  (default to )
     * @param {module:api/GroupApi~groupGroupIdMemberGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/MemberWithReplyCountResponse}
     */
    this.groupGroupIdMemberGet = function(groupId, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'groupId' is set
      if (groupId === undefined || groupId === null) {
        throw new Error("Missing the required parameter 'groupId' when calling groupGroupIdMemberGet");
      }


      var pathParams = {
        'group_id': groupId
      };
      var queryParams = {
      };
      var headerParams = {
        'Authorization': opts['authorization']
      };
      var formParams = {
      };

      var authNames = ['web'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = MemberWithReplyCountResponse;

      return this.apiClient.callApi(
        '/group/{group_id}/member', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the groupGroupIdMemberStatisticsGet operation.
     * @callback module:api/GroupApi~groupGroupIdMemberStatisticsGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/MemberAllStatisticsResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Number} groupId 
     * @param {Object} opts Optional parameters
     * @param {String} opts.authorization  (default to )
     * @param {module:api/GroupApi~groupGroupIdMemberStatisticsGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/MemberAllStatisticsResponse}
     */
    this.groupGroupIdMemberStatisticsGet = function(groupId, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'groupId' is set
      if (groupId === undefined || groupId === null) {
        throw new Error("Missing the required parameter 'groupId' when calling groupGroupIdMemberStatisticsGet");
      }


      var pathParams = {
        'group_id': groupId
      };
      var queryParams = {
      };
      var headerParams = {
        'Authorization': opts['authorization']
      };
      var formParams = {
      };

      var authNames = ['web'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = MemberAllStatisticsResponse;

      return this.apiClient.callApi(
        '/group/{group_id}/member/statistics', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the groupGroupIdMemberStatisticsTopicListGet operation.
     * @callback module:api/GroupApi~groupGroupIdMemberStatisticsTopicListGetCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/ShareCard>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Number} groupId 
     * @param {Object} opts Optional parameters
     * @param {String} opts.authorization  (default to )
     * @param {Number} opts.limit max records to return (default to 20)
     * @param {Number} opts.page page number (default to 1)
     * @param {module:api/GroupApi~groupGroupIdMemberStatisticsTopicListGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/ShareCard>}
     */
    this.groupGroupIdMemberStatisticsTopicListGet = function(groupId, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'groupId' is set
      if (groupId === undefined || groupId === null) {
        throw new Error("Missing the required parameter 'groupId' when calling groupGroupIdMemberStatisticsTopicListGet");
      }


      var pathParams = {
        'group_id': groupId
      };
      var queryParams = {
        'limit': opts['limit'],
        'page': opts['page']
      };
      var headerParams = {
        'Authorization': opts['authorization']
      };
      var formParams = {
      };

      var authNames = ['web'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = [ShareCard];

      return this.apiClient.callApi(
        '/group/{group_id}/member/statistics/topic_list', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the groupGroupIdMemberUidLikeTopicListGet operation.
     * @callback module:api/GroupApi~groupGroupIdMemberUidLikeTopicListGetCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/ShareCard>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Number} groupId 
     * @param {String} uid 
     * @param {Object} opts Optional parameters
     * @param {String} opts.authorization  (default to )
     * @param {Number} opts.limit max records to return (default to 20)
     * @param {Number} opts.page page number (default to 1)
     * @param {module:api/GroupApi~groupGroupIdMemberUidLikeTopicListGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/ShareCard>}
     */
    this.groupGroupIdMemberUidLikeTopicListGet = function(groupId, uid, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'groupId' is set
      if (groupId === undefined || groupId === null) {
        throw new Error("Missing the required parameter 'groupId' when calling groupGroupIdMemberUidLikeTopicListGet");
      }

      // verify the required parameter 'uid' is set
      if (uid === undefined || uid === null) {
        throw new Error("Missing the required parameter 'uid' when calling groupGroupIdMemberUidLikeTopicListGet");
      }


      var pathParams = {
        'group_id': groupId,
        'uid': uid
      };
      var queryParams = {
        'limit': opts['limit'],
        'page': opts['page']
      };
      var headerParams = {
        'Authorization': opts['authorization']
      };
      var formParams = {
      };

      var authNames = ['web'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = [ShareCard];

      return this.apiClient.callApi(
        '/group/{group_id}/member/{uid}/like_topic_list', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the groupGroupIdMemberUidPrisonerPut operation.
     * @callback module:api/GroupApi~groupGroupIdMemberUidPrisonerPutCallback
     * @param {String} error Error message, if any.
     * @param {module:model/MemberResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Number} groupId 
     * @param {String} uid 
     * @param {module:model/PrisonerRequest} member 
     * @param {Object} opts Optional parameters
     * @param {String} opts.authorization  (default to )
     * @param {module:api/GroupApi~groupGroupIdMemberUidPrisonerPutCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/MemberResponse}
     */
    this.groupGroupIdMemberUidPrisonerPut = function(groupId, uid, member, opts, callback) {
      opts = opts || {};
      var postBody = member;

      // verify the required parameter 'groupId' is set
      if (groupId === undefined || groupId === null) {
        throw new Error("Missing the required parameter 'groupId' when calling groupGroupIdMemberUidPrisonerPut");
      }

      // verify the required parameter 'uid' is set
      if (uid === undefined || uid === null) {
        throw new Error("Missing the required parameter 'uid' when calling groupGroupIdMemberUidPrisonerPut");
      }

      // verify the required parameter 'member' is set
      if (member === undefined || member === null) {
        throw new Error("Missing the required parameter 'member' when calling groupGroupIdMemberUidPrisonerPut");
      }


      var pathParams = {
        'group_id': groupId,
        'uid': uid
      };
      var queryParams = {
      };
      var headerParams = {
        'Authorization': opts['authorization']
      };
      var formParams = {
      };

      var authNames = ['web'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = MemberResponse;

      return this.apiClient.callApi(
        '/group/{group_id}/member/{uid}/prisoner', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the groupGroupIdMemberUidStatisticsGet operation.
     * @callback module:api/GroupApi~groupGroupIdMemberUidStatisticsGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/MemberStatisticsResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Number} groupId 
     * @param {String} uid 
     * @param {Object} opts Optional parameters
     * @param {String} opts.authorization  (default to )
     * @param {module:api/GroupApi~groupGroupIdMemberUidStatisticsGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/MemberStatisticsResponse}
     */
    this.groupGroupIdMemberUidStatisticsGet = function(groupId, uid, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'groupId' is set
      if (groupId === undefined || groupId === null) {
        throw new Error("Missing the required parameter 'groupId' when calling groupGroupIdMemberUidStatisticsGet");
      }

      // verify the required parameter 'uid' is set
      if (uid === undefined || uid === null) {
        throw new Error("Missing the required parameter 'uid' when calling groupGroupIdMemberUidStatisticsGet");
      }


      var pathParams = {
        'group_id': groupId,
        'uid': uid
      };
      var queryParams = {
      };
      var headerParams = {
        'Authorization': opts['authorization']
      };
      var formParams = {
      };

      var authNames = ['web'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = MemberStatisticsResponse;

      return this.apiClient.callApi(
        '/group/{group_id}/member/{uid}/statistics', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the groupGroupIdMembersGet operation.
     * @callback module:api/GroupApi~groupGroupIdMembersGetCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/MemberUserResponse>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Number} groupId 
     * @param {Object} opts Optional parameters
     * @param {Number} opts.limit max records to return (default to 20)
     * @param {String} opts.authorization  (default to )
     * @param {Number} opts.page page number (default to 1)
     * @param {Boolean} opts.isPrisoner 
     * @param {module:api/GroupApi~groupGroupIdMembersGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/MemberUserResponse>}
     */
    this.groupGroupIdMembersGet = function(groupId, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'groupId' is set
      if (groupId === undefined || groupId === null) {
        throw new Error("Missing the required parameter 'groupId' when calling groupGroupIdMembersGet");
      }


      var pathParams = {
        'group_id': groupId
      };
      var queryParams = {
        'limit': opts['limit'],
        'page': opts['page'],
        'is_prisoner': opts['isPrisoner']
      };
      var headerParams = {
        'Authorization': opts['authorization']
      };
      var formParams = {
      };

      var authNames = ['web'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = [MemberUserResponse];

      return this.apiClient.callApi(
        '/group/{group_id}/members', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the groupGroupIdPut operation.
     * @callback module:api/GroupApi~groupGroupIdPutCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GroupResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {module:model/GroupRequest} group 
     * @param {Number} groupId 
     * @param {Object} opts Optional parameters
     * @param {String} opts.authorization  (default to )
     * @param {module:api/GroupApi~groupGroupIdPutCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GroupResponse}
     */
    this.groupGroupIdPut = function(group, groupId, opts, callback) {
      opts = opts || {};
      var postBody = group;

      // verify the required parameter 'group' is set
      if (group === undefined || group === null) {
        throw new Error("Missing the required parameter 'group' when calling groupGroupIdPut");
      }

      // verify the required parameter 'groupId' is set
      if (groupId === undefined || groupId === null) {
        throw new Error("Missing the required parameter 'groupId' when calling groupGroupIdPut");
      }


      var pathParams = {
        'group_id': groupId
      };
      var queryParams = {
      };
      var headerParams = {
        'Authorization': opts['authorization']
      };
      var formParams = {
      };

      var authNames = ['web'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = GroupResponse;

      return this.apiClient.callApi(
        '/group/{group_id}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the groupGroupIdRankGet operation.
     * @callback module:api/GroupApi~groupGroupIdRankGetCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/RankResponse>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Number} groupId 
     * @param {Object} opts Optional parameters
     * @param {String} opts.authorization  (default to )
     * @param {module:model/String} opts.duration  (default to last_week)
     * @param {Number} opts.limit max records to return (default to 10)
     * @param {Number} opts.page page number (default to 1)
     * @param {module:api/GroupApi~groupGroupIdRankGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/RankResponse>}
     */
    this.groupGroupIdRankGet = function(groupId, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'groupId' is set
      if (groupId === undefined || groupId === null) {
        throw new Error("Missing the required parameter 'groupId' when calling groupGroupIdRankGet");
      }


      var pathParams = {
        'group_id': groupId
      };
      var queryParams = {
        'duration': opts['duration'],
        'limit': opts['limit'],
        'page': opts['page']
      };
      var headerParams = {
        'Authorization': opts['authorization']
      };
      var formParams = {
      };

      var authNames = ['web'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = [RankResponse];

      return this.apiClient.callApi(
        '/group/{group_id}/rank', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the groupGroupIdSubscribePost operation.
     * @callback module:api/GroupApi~groupGroupIdSubscribePostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SubscribeResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Number} groupId 
     * @param {module:model/SubscribeRequest} subscribe 
     * @param {Object} opts Optional parameters
     * @param {String} opts.authorization  (default to )
     * @param {String} opts.uidShare 
     * @param {String} opts.inviteCode 
     * @param {Number} opts.orderId 
     * @param {module:api/GroupApi~groupGroupIdSubscribePostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SubscribeResponse}
     */
    this.groupGroupIdSubscribePost = function(groupId, subscribe, opts, callback) {
      opts = opts || {};
      var postBody = subscribe;

      // verify the required parameter 'groupId' is set
      if (groupId === undefined || groupId === null) {
        throw new Error("Missing the required parameter 'groupId' when calling groupGroupIdSubscribePost");
      }

      // verify the required parameter 'subscribe' is set
      if (subscribe === undefined || subscribe === null) {
        throw new Error("Missing the required parameter 'subscribe' when calling groupGroupIdSubscribePost");
      }


      var pathParams = {
        'group_id': groupId
      };
      var queryParams = {
        'uid_share': opts['uidShare'],
        'invite_code': opts['inviteCode'],
        'order_id': opts['orderId']
      };
      var headerParams = {
        'Authorization': opts['authorization']
      };
      var formParams = {
      };

      var authNames = ['web'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = SubscribeResponse;

      return this.apiClient.callApi(
        '/group/{group_id}/subscribe', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the groupGroupIdSummaryPut operation.
     * @callback module:api/GroupApi~groupGroupIdSummaryPutCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Success} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {module:model/GroupSummaryRequest} group 
     * @param {Number} groupId 
     * @param {Object} opts Optional parameters
     * @param {String} opts.authorization  (default to )
     * @param {module:api/GroupApi~groupGroupIdSummaryPutCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Success}
     */
    this.groupGroupIdSummaryPut = function(group, groupId, opts, callback) {
      opts = opts || {};
      var postBody = group;

      // verify the required parameter 'group' is set
      if (group === undefined || group === null) {
        throw new Error("Missing the required parameter 'group' when calling groupGroupIdSummaryPut");
      }

      // verify the required parameter 'groupId' is set
      if (groupId === undefined || groupId === null) {
        throw new Error("Missing the required parameter 'groupId' when calling groupGroupIdSummaryPut");
      }


      var pathParams = {
        'group_id': groupId
      };
      var queryParams = {
      };
      var headerParams = {
        'Authorization': opts['authorization']
      };
      var formParams = {
      };

      var authNames = ['web'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = Success;

      return this.apiClient.callApi(
        '/group/{group_id}/summary', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the groupNameVerifyGet operation.
     * @callback module:api/GroupApi~groupNameVerifyGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Success} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} name 
     * @param {Object} opts Optional parameters
     * @param {String} opts.authorization  (default to )
     * @param {module:api/GroupApi~groupNameVerifyGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Success}
     */
    this.groupNameVerifyGet = function(name, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling groupNameVerifyGet");
      }


      var pathParams = {
      };
      var queryParams = {
        'name': name
      };
      var headerParams = {
        'Authorization': opts['authorization']
      };
      var formParams = {
      };

      var authNames = ['web'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = Success;

      return this.apiClient.callApi(
        '/group/name/verify', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the groupsDiscoverGet operation.
     * @callback module:api/GroupApi~groupsDiscoverGetCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/GroupResponse>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {String} opts.authorization  (default to )
     * @param {Number} opts.limit max records to return (default to 20)
     * @param {Number} opts.page page number (default to 1)
     * @param {module:api/GroupApi~groupsDiscoverGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/GroupResponse>}
     */
    this.groupsDiscoverGet = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'limit': opts['limit'],
        'page': opts['page']
      };
      var headerParams = {
        'Authorization': opts['authorization']
      };
      var formParams = {
      };

      var authNames = ['web'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = [GroupResponse];

      return this.apiClient.callApi(
        '/groups/discover', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the groupsGet operation.
     * @callback module:api/GroupApi~groupsGetCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/GroupResponse>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} uid 
     * @param {Object} opts Optional parameters
     * @param {String} opts.authorization  (default to )
     * @param {Number} opts.limit max records to return (default to 20)
     * @param {Number} opts.page page number (default to 1)
     * @param {Boolean} opts.random random output (default to false)
     * @param {module:api/GroupApi~groupsGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/GroupResponse>}
     */
    this.groupsGet = function(uid, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'uid' is set
      if (uid === undefined || uid === null) {
        throw new Error("Missing the required parameter 'uid' when calling groupsGet");
      }


      var pathParams = {
      };
      var queryParams = {
        'limit': opts['limit'],
        'page': opts['page'],
        'random': opts['random'],
        'uid': uid
      };
      var headerParams = {
        'Authorization': opts['authorization']
      };
      var formParams = {
      };

      var authNames = ['web'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = [GroupResponse];

      return this.apiClient.callApi(
        '/groups', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the groupsMygroupGet operation.
     * @callback module:api/GroupApi~groupsMygroupGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GroupResponseCanEmpty} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {String} opts.authorization  (default to )
     * @param {module:api/GroupApi~groupsMygroupGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GroupResponseCanEmpty}
     */
    this.groupsMygroupGet = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
      };
      var headerParams = {
        'Authorization': opts['authorization']
      };
      var formParams = {
      };

      var authNames = ['web'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = GroupResponseCanEmpty;

      return this.apiClient.callApi(
        '/groups/mygroup', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the groupsPost operation.
     * @callback module:api/GroupApi~groupsPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GroupResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {module:model/GroupRequest} group 
     * @param {Object} opts Optional parameters
     * @param {String} opts.authorization  (default to )
     * @param {module:api/GroupApi~groupsPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GroupResponse}
     */
    this.groupsPost = function(group, opts, callback) {
      opts = opts || {};
      var postBody = group;

      // verify the required parameter 'group' is set
      if (group === undefined || group === null) {
        throw new Error("Missing the required parameter 'group' when calling groupsPost");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var headerParams = {
        'Authorization': opts['authorization']
      };
      var formParams = {
      };

      var authNames = ['web'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = GroupResponse;

      return this.apiClient.callApi(
        '/groups', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the rankTimeRangeGet operation.
     * @callback module:api/GroupApi~rankTimeRangeGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse200} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {String} opts.authorization  (default to )
     * @param {module:api/GroupApi~rankTimeRangeGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InlineResponse200}
     */
    this.rankTimeRangeGet = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
      };
      var headerParams = {
        'Authorization': opts['authorization']
      };
      var formParams = {
      };

      var authNames = ['web'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = InlineResponse200;

      return this.apiClient.callApi(
        '/rank/time_range', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the userUidSharesGet operation.
     * @callback module:api/GroupApi~userUidSharesGetCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/GroupShareItem>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} uid 
     * @param {Object} opts Optional parameters
     * @param {String} opts.authorization  (default to )
     * @param {Number} opts.limit max records to return (default to 20)
     * @param {Number} opts.page page number (default to 1)
     * @param {module:api/GroupApi~userUidSharesGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/GroupShareItem>}
     */
    this.userUidSharesGet = function(uid, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'uid' is set
      if (uid === undefined || uid === null) {
        throw new Error("Missing the required parameter 'uid' when calling userUidSharesGet");
      }


      var pathParams = {
        'uid': uid
      };
      var queryParams = {
        'limit': opts['limit'],
        'page': opts['page']
      };
      var headerParams = {
        'Authorization': opts['authorization']
      };
      var formParams = {
      };

      var authNames = ['web'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = [GroupShareItem];

      return this.apiClient.callApi(
        '/user/{uid}/shares', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
  };

  return exports;
}));
