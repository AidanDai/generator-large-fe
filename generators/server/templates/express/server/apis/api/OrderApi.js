/**
 * Mimir
 * APIs
 *
 * OpenAPI spec version: 1.0.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.2.3
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/Error', 'model/IOSOrderRequest', 'model/JWTToken', 'model/OrderRequest', 'model/OrderResponse', 'model/Success'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../model/Error'), require('../model/IOSOrderRequest'), require('../model/JWTToken'), require('../model/OrderRequest'), require('../model/OrderResponse'), require('../model/Success'));
  } else {
    // Browser globals (root is window)
    if (!root.Mimir) {
      root.Mimir = {};
    }
    root.Mimir.OrderApi = factory(root.Mimir.ApiClient, root.Mimir.Error, root.Mimir.IOSOrderRequest, root.Mimir.JWTToken, root.Mimir.OrderRequest, root.Mimir.OrderResponse, root.Mimir.Success);
  }
}(this, function(ApiClient, Error, IOSOrderRequest, JWTToken, OrderRequest, OrderResponse, Success) {
  'use strict';

  /**
   * Order service.
   * @module api/OrderApi
   * @version 1.0.0
   */

  /**
   * Constructs a new OrderApi. 
   * @alias module:api/OrderApi
   * @class
   * @param {module:ApiClient} apiClient Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;


    /**
     * Callback function to receive the result of the orderOrderIdActionOrderActionIdPost operation.
     * @callback module:api/OrderApi~orderOrderIdActionOrderActionIdPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Success} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Number} orderId 
     * @param {Number} orderActionId 
     * @param {module:model/JWTToken} token 
     * @param {Object} opts Optional parameters
     * @param {String} opts.authorization  (default to )
     * @param {module:api/OrderApi~orderOrderIdActionOrderActionIdPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Success}
     */
    this.orderOrderIdActionOrderActionIdPost = function(orderId, orderActionId, token, opts, callback) {
      opts = opts || {};
      var postBody = token;

      // verify the required parameter 'orderId' is set
      if (orderId === undefined || orderId === null) {
        throw new Error("Missing the required parameter 'orderId' when calling orderOrderIdActionOrderActionIdPost");
      }

      // verify the required parameter 'orderActionId' is set
      if (orderActionId === undefined || orderActionId === null) {
        throw new Error("Missing the required parameter 'orderActionId' when calling orderOrderIdActionOrderActionIdPost");
      }

      // verify the required parameter 'token' is set
      if (token === undefined || token === null) {
        throw new Error("Missing the required parameter 'token' when calling orderOrderIdActionOrderActionIdPost");
      }


      var pathParams = {
        'order_id': orderId,
        'order_action_id': orderActionId
      };
      var queryParams = {
      };
      var headerParams = {
        'Authorization': opts['authorization']
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = Success;

      return this.apiClient.callApi(
        '/order/{order_id}/action/{order_action_id}', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the orderOrderIdGet operation.
     * @callback module:api/OrderApi~orderOrderIdGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/OrderResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Number} orderId 
     * @param {Object} opts Optional parameters
     * @param {String} opts.authorization  (default to )
     * @param {module:api/OrderApi~orderOrderIdGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/OrderResponse}
     */
    this.orderOrderIdGet = function(orderId, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'orderId' is set
      if (orderId === undefined || orderId === null) {
        throw new Error("Missing the required parameter 'orderId' when calling orderOrderIdGet");
      }


      var pathParams = {
        'order_id': orderId
      };
      var queryParams = {
      };
      var headerParams = {
        'Authorization': opts['authorization']
      };
      var formParams = {
      };

      var authNames = ['web'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = OrderResponse;

      return this.apiClient.callApi(
        '/order/{order_id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the orderOrderIdPut operation.
     * @callback module:api/OrderApi~orderOrderIdPutCallback
     * @param {String} error Error message, if any.
     * @param {module:model/OrderResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Number} orderId 
     * @param {module:model/IOSOrderRequest} order 
     * @param {Object} opts Optional parameters
     * @param {String} opts.authorization  (default to )
     * @param {module:api/OrderApi~orderOrderIdPutCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/OrderResponse}
     */
    this.orderOrderIdPut = function(orderId, order, opts, callback) {
      opts = opts || {};
      var postBody = order;

      // verify the required parameter 'orderId' is set
      if (orderId === undefined || orderId === null) {
        throw new Error("Missing the required parameter 'orderId' when calling orderOrderIdPut");
      }

      // verify the required parameter 'order' is set
      if (order === undefined || order === null) {
        throw new Error("Missing the required parameter 'order' when calling orderOrderIdPut");
      }


      var pathParams = {
        'order_id': orderId
      };
      var queryParams = {
      };
      var headerParams = {
        'Authorization': opts['authorization']
      };
      var formParams = {
      };

      var authNames = ['web'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = OrderResponse;

      return this.apiClient.callApi(
        '/order/{order_id}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the userUidOrdersGet operation.
     * @callback module:api/OrderApi~userUidOrdersGetCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/OrderResponse>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} uid 
     * @param {Object} opts Optional parameters
     * @param {String} opts.authorization  (default to )
     * @param {Number} opts.limit max records to return (default to 20)
     * @param {Number} opts.page page number (default to 1)
     * @param {module:model/String} opts.flow 
     * @param {Array.<module:model/String>} opts.reason  (default to [])
     * @param {module:api/OrderApi~userUidOrdersGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/OrderResponse>}
     */
    this.userUidOrdersGet = function(uid, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'uid' is set
      if (uid === undefined || uid === null) {
        throw new Error("Missing the required parameter 'uid' when calling userUidOrdersGet");
      }


      var pathParams = {
        'uid': uid
      };
      var queryParams = {
        'limit': opts['limit'],
        'page': opts['page'],
        'flow': opts['flow'],
        'reason': this.apiClient.buildCollectionParam(opts['reason'], 'multi')
      };
      var headerParams = {
        'Authorization': opts['authorization']
      };
      var formParams = {
      };

      var authNames = ['web'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = [OrderResponse];

      return this.apiClient.callApi(
        '/user/{uid}/orders', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the userUidOrdersIncomeGet operation.
     * @callback module:api/OrderApi~userUidOrdersIncomeGetCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/OrderResponse>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} uid 
     * @param {Object} opts Optional parameters
     * @param {String} opts.authorization  (default to )
     * @param {Number} opts.limit max records to return (default to 20)
     * @param {Number} opts.page page number (default to 1)
     * @param {module:api/OrderApi~userUidOrdersIncomeGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/OrderResponse>}
     */
    this.userUidOrdersIncomeGet = function(uid, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'uid' is set
      if (uid === undefined || uid === null) {
        throw new Error("Missing the required parameter 'uid' when calling userUidOrdersIncomeGet");
      }


      var pathParams = {
        'uid': uid
      };
      var queryParams = {
        'limit': opts['limit'],
        'page': opts['page']
      };
      var headerParams = {
        'Authorization': opts['authorization']
      };
      var formParams = {
      };

      var authNames = ['web'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = [OrderResponse];

      return this.apiClient.callApi(
        '/user/{uid}/orders/income', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the userUidOrdersPost operation.
     * @callback module:api/OrderApi~userUidOrdersPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Success} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} uid 
     * @param {module:model/OrderRequest} order 
     * @param {Object} opts Optional parameters
     * @param {String} opts.authorization  (default to )
     * @param {module:api/OrderApi~userUidOrdersPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Success}
     */
    this.userUidOrdersPost = function(uid, order, opts, callback) {
      opts = opts || {};
      var postBody = order;

      // verify the required parameter 'uid' is set
      if (uid === undefined || uid === null) {
        throw new Error("Missing the required parameter 'uid' when calling userUidOrdersPost");
      }

      // verify the required parameter 'order' is set
      if (order === undefined || order === null) {
        throw new Error("Missing the required parameter 'order' when calling userUidOrdersPost");
      }


      var pathParams = {
        'uid': uid
      };
      var queryParams = {
      };
      var headerParams = {
        'Authorization': opts['authorization']
      };
      var formParams = {
      };

      var authNames = ['web'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = Success;

      return this.apiClient.callApi(
        '/user/{uid}/orders', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
  };

  return exports;
}));
