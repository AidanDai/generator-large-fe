/**
 * Mimir
 * APIs
 *
 * OpenAPI spec version: 1.0.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.2.3
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/AwardResponse', 'model/Error', 'model/GroupResponse', 'model/GroupShareRepItem', 'model/PayRequest', 'model/ReplyRequest', 'model/ReplyResponse', 'model/ReplyWithParentResponse', 'model/ReportRequest', 'model/ShareCard', 'model/ShareItem', 'model/ShareRepItem', 'model/ShareRequest', 'model/ShareResponse', 'model/ShareResponseWithoutUser', 'model/Success'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../model/AwardResponse'), require('../model/Error'), require('../model/GroupResponse'), require('../model/GroupShareRepItem'), require('../model/PayRequest'), require('../model/ReplyRequest'), require('../model/ReplyResponse'), require('../model/ReplyWithParentResponse'), require('../model/ReportRequest'), require('../model/ShareCard'), require('../model/ShareItem'), require('../model/ShareRepItem'), require('../model/ShareRequest'), require('../model/ShareResponse'), require('../model/ShareResponseWithoutUser'), require('../model/Success'));
  } else {
    // Browser globals (root is window)
    if (!root.Mimir) {
      root.Mimir = {};
    }
    root.Mimir.ShareApi = factory(root.Mimir.ApiClient, root.Mimir.AwardResponse, root.Mimir.Error, root.Mimir.GroupResponse, root.Mimir.GroupShareRepItem, root.Mimir.PayRequest, root.Mimir.ReplyRequest, root.Mimir.ReplyResponse, root.Mimir.ReplyWithParentResponse, root.Mimir.ReportRequest, root.Mimir.ShareCard, root.Mimir.ShareItem, root.Mimir.ShareRepItem, root.Mimir.ShareRequest, root.Mimir.ShareResponse, root.Mimir.ShareResponseWithoutUser, root.Mimir.Success);
  }
}(this, function(ApiClient, AwardResponse, Error, GroupResponse, GroupShareRepItem, PayRequest, ReplyRequest, ReplyResponse, ReplyWithParentResponse, ReportRequest, ShareCard, ShareItem, ShareRepItem, ShareRequest, ShareResponse, ShareResponseWithoutUser, Success) {
  'use strict';

  /**
   * Share service.
   * @module api/ShareApi
   * @version 1.0.0
   */

  /**
   * Constructs a new ShareApi. 
   * @alias module:api/ShareApi
   * @class
   * @param {module:ApiClient} apiClient Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;


    /**
     * Callback function to receive the result of the groupGroupIdShareRepsGet operation.
     * @callback module:api/ShareApi~groupGroupIdShareRepsGetCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/ShareRepItem>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Number} groupId 
     * @param {Object} opts Optional parameters
     * @param {String} opts.authorization  (default to )
     * @param {Number} opts.limit max records to return (default to 20)
     * @param {Number} opts.page page number (default to 1)
     * @param {String} opts.uid 
     * @param {module:api/ShareApi~groupGroupIdShareRepsGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/ShareRepItem>}
     */
    this.groupGroupIdShareRepsGet = function(groupId, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'groupId' is set
      if (groupId === undefined || groupId === null) {
        throw new Error("Missing the required parameter 'groupId' when calling groupGroupIdShareRepsGet");
      }


      var pathParams = {
        'group_id': groupId
      };
      var queryParams = {
        'limit': opts['limit'],
        'page': opts['page'],
        'uid': opts['uid']
      };
      var headerParams = {
        'Authorization': opts['authorization']
      };
      var formParams = {
      };

      var authNames = ['web'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = [ShareRepItem];

      return this.apiClient.callApi(
        '/group/{group_id}/share_reps', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the groupGroupIdSharesGet operation.
     * @callback module:api/ShareApi~groupGroupIdSharesGetCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/ShareItem>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Number} groupId 
     * @param {Object} opts Optional parameters
     * @param {String} opts.authorization  (default to )
     * @param {Number} opts.limit max records to return (default to 20)
     * @param {Number} opts.page page number (default to 1)
     * @param {String} opts.tag 
     * @param {module:api/ShareApi~groupGroupIdSharesGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/ShareItem>}
     */
    this.groupGroupIdSharesGet = function(groupId, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'groupId' is set
      if (groupId === undefined || groupId === null) {
        throw new Error("Missing the required parameter 'groupId' when calling groupGroupIdSharesGet");
      }


      var pathParams = {
        'group_id': groupId
      };
      var queryParams = {
        'limit': opts['limit'],
        'page': opts['page'],
        'tag': opts['tag']
      };
      var headerParams = {
        'Authorization': opts['authorization']
      };
      var formParams = {
      };

      var authNames = ['web'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = [ShareItem];

      return this.apiClient.callApi(
        '/group/{group_id}/shares', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the groupGroupIdSharesPost operation.
     * @callback module:api/ShareApi~groupGroupIdSharesPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ShareCard} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {module:model/ShareRequest} share 
     * @param {Number} groupId 
     * @param {Object} opts Optional parameters
     * @param {String} opts.authorization  (default to )
     * @param {module:api/ShareApi~groupGroupIdSharesPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ShareCard}
     */
    this.groupGroupIdSharesPost = function(share, groupId, opts, callback) {
      opts = opts || {};
      var postBody = share;

      // verify the required parameter 'share' is set
      if (share === undefined || share === null) {
        throw new Error("Missing the required parameter 'share' when calling groupGroupIdSharesPost");
      }

      // verify the required parameter 'groupId' is set
      if (groupId === undefined || groupId === null) {
        throw new Error("Missing the required parameter 'groupId' when calling groupGroupIdSharesPost");
      }


      var pathParams = {
        'group_id': groupId
      };
      var queryParams = {
      };
      var headerParams = {
        'Authorization': opts['authorization']
      };
      var formParams = {
      };

      var authNames = ['web'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = ShareCard;

      return this.apiClient.callApi(
        '/group/{group_id}/shares', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the replyReplyIdGet operation.
     * @callback module:api/ShareApi~replyReplyIdGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ReplyWithParentResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Number} replyId 
     * @param {Object} opts Optional parameters
     * @param {String} opts.authorization  (default to )
     * @param {module:api/ShareApi~replyReplyIdGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ReplyWithParentResponse}
     */
    this.replyReplyIdGet = function(replyId, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'replyId' is set
      if (replyId === undefined || replyId === null) {
        throw new Error("Missing the required parameter 'replyId' when calling replyReplyIdGet");
      }


      var pathParams = {
        'reply_id': replyId
      };
      var queryParams = {
      };
      var headerParams = {
        'Authorization': opts['authorization']
      };
      var formParams = {
      };

      var authNames = ['web'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = ReplyWithParentResponse;

      return this.apiClient.callApi(
        '/reply/{reply_id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the shareRepRepIdGet operation.
     * @callback module:api/ShareApi~shareRepRepIdGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GroupShareRepItem} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Number} repId 
     * @param {Object} opts Optional parameters
     * @param {String} opts.authorization  (default to )
     * @param {String} opts.uidShare 
     * @param {module:api/ShareApi~shareRepRepIdGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GroupShareRepItem}
     */
    this.shareRepRepIdGet = function(repId, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'repId' is set
      if (repId === undefined || repId === null) {
        throw new Error("Missing the required parameter 'repId' when calling shareRepRepIdGet");
      }


      var pathParams = {
        'rep_id': repId
      };
      var queryParams = {
        'uid_share': opts['uidShare']
      };
      var headerParams = {
        'Authorization': opts['authorization']
      };
      var formParams = {
      };

      var authNames = ['web'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = GroupShareRepItem;

      return this.apiClient.callApi(
        '/share_rep/{rep_id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the shareShareIdActionDelete operation.
     * @callback module:api/ShareApi~shareShareIdActionDeleteCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ShareResponseWithoutUser} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Number} shareId 
     * @param {module:model/String} action 
     * @param {Object} opts Optional parameters
     * @param {String} opts.authorization  (default to )
     * @param {module:api/ShareApi~shareShareIdActionDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ShareResponseWithoutUser}
     */
    this.shareShareIdActionDelete = function(shareId, action, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'shareId' is set
      if (shareId === undefined || shareId === null) {
        throw new Error("Missing the required parameter 'shareId' when calling shareShareIdActionDelete");
      }

      // verify the required parameter 'action' is set
      if (action === undefined || action === null) {
        throw new Error("Missing the required parameter 'action' when calling shareShareIdActionDelete");
      }


      var pathParams = {
        'share_id': shareId,
        'action': action
      };
      var queryParams = {
      };
      var headerParams = {
        'Authorization': opts['authorization']
      };
      var formParams = {
      };

      var authNames = ['web'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = ShareResponseWithoutUser;

      return this.apiClient.callApi(
        '/share/{share_id}/{action}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the shareShareIdActionPost operation.
     * @callback module:api/ShareApi~shareShareIdActionPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ShareResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Number} shareId 
     * @param {module:model/String} action 
     * @param {Object} opts Optional parameters
     * @param {String} opts.authorization  (default to )
     * @param {module:api/ShareApi~shareShareIdActionPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ShareResponse}
     */
    this.shareShareIdActionPost = function(shareId, action, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'shareId' is set
      if (shareId === undefined || shareId === null) {
        throw new Error("Missing the required parameter 'shareId' when calling shareShareIdActionPost");
      }

      // verify the required parameter 'action' is set
      if (action === undefined || action === null) {
        throw new Error("Missing the required parameter 'action' when calling shareShareIdActionPost");
      }


      var pathParams = {
        'share_id': shareId,
        'action': action
      };
      var queryParams = {
      };
      var headerParams = {
        'Authorization': opts['authorization']
      };
      var formParams = {
      };

      var authNames = ['web'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = ShareResponse;

      return this.apiClient.callApi(
        '/share/{share_id}/{action}', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the shareShareIdBuyPost operation.
     * @callback module:api/ShareApi~shareShareIdBuyPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ShareResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Number} shareId 
     * @param {String} uidShare 
     * @param {Object} opts Optional parameters
     * @param {String} opts.authorization  (default to )
     * @param {Number} opts.orderId 
     * @param {module:api/ShareApi~shareShareIdBuyPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ShareResponse}
     */
    this.shareShareIdBuyPost = function(shareId, uidShare, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'shareId' is set
      if (shareId === undefined || shareId === null) {
        throw new Error("Missing the required parameter 'shareId' when calling shareShareIdBuyPost");
      }

      // verify the required parameter 'uidShare' is set
      if (uidShare === undefined || uidShare === null) {
        throw new Error("Missing the required parameter 'uidShare' when calling shareShareIdBuyPost");
      }


      var pathParams = {
        'share_id': shareId
      };
      var queryParams = {
        'uid_share': uidShare,
        'order_id': opts['orderId']
      };
      var headerParams = {
        'Authorization': opts['authorization']
      };
      var formParams = {
      };

      var authNames = ['web'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = ShareResponse;

      return this.apiClient.callApi(
        '/share/{share_id}/buy', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the shareShareIdDelete operation.
     * @callback module:api/ShareApi~shareShareIdDeleteCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ShareResponseWithoutUser} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Number} shareId 
     * @param {Object} opts Optional parameters
     * @param {String} opts.authorization  (default to )
     * @param {module:api/ShareApi~shareShareIdDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ShareResponseWithoutUser}
     */
    this.shareShareIdDelete = function(shareId, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'shareId' is set
      if (shareId === undefined || shareId === null) {
        throw new Error("Missing the required parameter 'shareId' when calling shareShareIdDelete");
      }


      var pathParams = {
        'share_id': shareId
      };
      var queryParams = {
      };
      var headerParams = {
        'Authorization': opts['authorization']
      };
      var formParams = {
      };

      var authNames = ['web'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = ShareResponseWithoutUser;

      return this.apiClient.callApi(
        '/share/{share_id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the shareShareIdFavoriteDelete operation.
     * @callback module:api/ShareApi~shareShareIdFavoriteDeleteCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Success} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Number} shareId 
     * @param {Object} opts Optional parameters
     * @param {String} opts.authorization  (default to )
     * @param {module:api/ShareApi~shareShareIdFavoriteDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Success}
     */
    this.shareShareIdFavoriteDelete = function(shareId, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'shareId' is set
      if (shareId === undefined || shareId === null) {
        throw new Error("Missing the required parameter 'shareId' when calling shareShareIdFavoriteDelete");
      }


      var pathParams = {
        'share_id': shareId
      };
      var queryParams = {
      };
      var headerParams = {
        'Authorization': opts['authorization']
      };
      var formParams = {
      };

      var authNames = ['web'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = Success;

      return this.apiClient.callApi(
        '/share/{share_id}/favorite', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the shareShareIdFavoritePost operation.
     * @callback module:api/ShareApi~shareShareIdFavoritePostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Success} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Number} shareId 
     * @param {Object} opts Optional parameters
     * @param {String} opts.authorization  (default to )
     * @param {module:api/ShareApi~shareShareIdFavoritePostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Success}
     */
    this.shareShareIdFavoritePost = function(shareId, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'shareId' is set
      if (shareId === undefined || shareId === null) {
        throw new Error("Missing the required parameter 'shareId' when calling shareShareIdFavoritePost");
      }


      var pathParams = {
        'share_id': shareId
      };
      var queryParams = {
      };
      var headerParams = {
        'Authorization': opts['authorization']
      };
      var formParams = {
      };

      var authNames = ['web'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = Success;

      return this.apiClient.callApi(
        '/share/{share_id}/favorite', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the shareShareIdGet operation.
     * @callback module:api/ShareApi~shareShareIdGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ShareCard} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Number} shareId 
     * @param {Object} opts Optional parameters
     * @param {String} opts.authorization  (default to )
     * @param {String} opts.uidShare 
     * @param {module:api/ShareApi~shareShareIdGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ShareCard}
     */
    this.shareShareIdGet = function(shareId, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'shareId' is set
      if (shareId === undefined || shareId === null) {
        throw new Error("Missing the required parameter 'shareId' when calling shareShareIdGet");
      }


      var pathParams = {
        'share_id': shareId
      };
      var queryParams = {
        'uid_share': opts['uidShare']
      };
      var headerParams = {
        'Authorization': opts['authorization']
      };
      var formParams = {
      };

      var authNames = ['web'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = ShareCard;

      return this.apiClient.callApi(
        '/share/{share_id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the shareShareIdGroupGet operation.
     * @callback module:api/ShareApi~shareShareIdGroupGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GroupResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Number} shareId 
     * @param {Object} opts Optional parameters
     * @param {String} opts.authorization  (default to )
     * @param {module:api/ShareApi~shareShareIdGroupGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GroupResponse}
     */
    this.shareShareIdGroupGet = function(shareId, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'shareId' is set
      if (shareId === undefined || shareId === null) {
        throw new Error("Missing the required parameter 'shareId' when calling shareShareIdGroupGet");
      }


      var pathParams = {
        'share_id': shareId
      };
      var queryParams = {
      };
      var headerParams = {
        'Authorization': opts['authorization']
      };
      var formParams = {
      };

      var authNames = ['web'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = GroupResponse;

      return this.apiClient.callApi(
        '/share/{share_id}/group', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the shareShareIdLeaderReadPost operation.
     * @callback module:api/ShareApi~shareShareIdLeaderReadPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Success} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Number} shareId 
     * @param {Object} opts Optional parameters
     * @param {String} opts.authorization  (default to )
     * @param {module:api/ShareApi~shareShareIdLeaderReadPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Success}
     */
    this.shareShareIdLeaderReadPost = function(shareId, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'shareId' is set
      if (shareId === undefined || shareId === null) {
        throw new Error("Missing the required parameter 'shareId' when calling shareShareIdLeaderReadPost");
      }


      var pathParams = {
        'share_id': shareId
      };
      var queryParams = {
      };
      var headerParams = {
        'Authorization': opts['authorization']
      };
      var formParams = {
      };

      var authNames = ['web'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = Success;

      return this.apiClient.callApi(
        '/share/{share_id}/leader_read', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the shareShareIdPut operation.
     * @callback module:api/ShareApi~shareShareIdPutCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ShareResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Number} shareId 
     * @param {module:model/ShareRequest} share 
     * @param {Object} opts Optional parameters
     * @param {String} opts.authorization  (default to )
     * @param {module:api/ShareApi~shareShareIdPutCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ShareResponse}
     */
    this.shareShareIdPut = function(shareId, share, opts, callback) {
      opts = opts || {};
      var postBody = share;

      // verify the required parameter 'shareId' is set
      if (shareId === undefined || shareId === null) {
        throw new Error("Missing the required parameter 'shareId' when calling shareShareIdPut");
      }

      // verify the required parameter 'share' is set
      if (share === undefined || share === null) {
        throw new Error("Missing the required parameter 'share' when calling shareShareIdPut");
      }


      var pathParams = {
        'share_id': shareId
      };
      var queryParams = {
      };
      var headerParams = {
        'Authorization': opts['authorization']
      };
      var formParams = {
      };

      var authNames = ['web'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = ShareResponse;

      return this.apiClient.callApi(
        '/share/{share_id}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the shareShareIdRepliesGet operation.
     * @callback module:api/ShareApi~shareShareIdRepliesGetCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/ReplyResponse>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Number} shareId 
     * @param {Object} opts Optional parameters
     * @param {String} opts.authorization  (default to )
     * @param {Number} opts.limit max records to return (default to 20)
     * @param {Number} opts.page page number (default to 1)
     * @param {Boolean} opts.isRecommended  (default to false)
     * @param {module:api/ShareApi~shareShareIdRepliesGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/ReplyResponse>}
     */
    this.shareShareIdRepliesGet = function(shareId, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'shareId' is set
      if (shareId === undefined || shareId === null) {
        throw new Error("Missing the required parameter 'shareId' when calling shareShareIdRepliesGet");
      }


      var pathParams = {
        'share_id': shareId
      };
      var queryParams = {
        'limit': opts['limit'],
        'page': opts['page'],
        'is_recommended': opts['isRecommended']
      };
      var headerParams = {
        'Authorization': opts['authorization']
      };
      var formParams = {
      };

      var authNames = ['web'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = [ReplyResponse];

      return this.apiClient.callApi(
        '/share/{share_id}/replies', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the shareShareIdRepliesPost operation.
     * @callback module:api/ShareApi~shareShareIdRepliesPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ReplyResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {module:model/ReplyRequest} share 
     * @param {Number} shareId 
     * @param {Object} opts Optional parameters
     * @param {String} opts.authorization  (default to )
     * @param {module:api/ShareApi~shareShareIdRepliesPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ReplyResponse}
     */
    this.shareShareIdRepliesPost = function(share, shareId, opts, callback) {
      opts = opts || {};
      var postBody = share;

      // verify the required parameter 'share' is set
      if (share === undefined || share === null) {
        throw new Error("Missing the required parameter 'share' when calling shareShareIdRepliesPost");
      }

      // verify the required parameter 'shareId' is set
      if (shareId === undefined || shareId === null) {
        throw new Error("Missing the required parameter 'shareId' when calling shareShareIdRepliesPost");
      }


      var pathParams = {
        'share_id': shareId
      };
      var queryParams = {
      };
      var headerParams = {
        'Authorization': opts['authorization']
      };
      var formParams = {
      };

      var authNames = ['web'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = ReplyResponse;

      return this.apiClient.callApi(
        '/share/{share_id}/replies', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the shareShareIdReportsPost operation.
     * @callback module:api/ShareApi~shareShareIdReportsPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Success} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Number} shareId 
     * @param {Object} opts Optional parameters
     * @param {String} opts.authorization  (default to )
     * @param {module:model/ReportRequest} opts.reason 
     * @param {module:api/ShareApi~shareShareIdReportsPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Success}
     */
    this.shareShareIdReportsPost = function(shareId, opts, callback) {
      opts = opts || {};
      var postBody = opts['reason'];

      // verify the required parameter 'shareId' is set
      if (shareId === undefined || shareId === null) {
        throw new Error("Missing the required parameter 'shareId' when calling shareShareIdReportsPost");
      }


      var pathParams = {
        'share_id': shareId
      };
      var queryParams = {
      };
      var headerParams = {
        'Authorization': opts['authorization']
      };
      var formParams = {
      };

      var authNames = ['web'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = Success;

      return this.apiClient.callApi(
        '/share/{share_id}/reports', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the shareShareIdShangPost operation.
     * @callback module:api/ShareApi~shareShareIdShangPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AwardResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {module:model/PayRequest} pay 
     * @param {Number} shareId 
     * @param {Object} opts Optional parameters
     * @param {String} opts.authorization  (default to )
     * @param {module:api/ShareApi~shareShareIdShangPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AwardResponse}
     */
    this.shareShareIdShangPost = function(pay, shareId, opts, callback) {
      opts = opts || {};
      var postBody = pay;

      // verify the required parameter 'pay' is set
      if (pay === undefined || pay === null) {
        throw new Error("Missing the required parameter 'pay' when calling shareShareIdShangPost");
      }

      // verify the required parameter 'shareId' is set
      if (shareId === undefined || shareId === null) {
        throw new Error("Missing the required parameter 'shareId' when calling shareShareIdShangPost");
      }


      var pathParams = {
        'share_id': shareId
      };
      var queryParams = {
      };
      var headerParams = {
        'Authorization': opts['authorization']
      };
      var formParams = {
      };

      var authNames = ['web'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = AwardResponse;

      return this.apiClient.callApi(
        '/share/{share_id}/shang', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the shareShareIdSharePost operation.
     * @callback module:api/ShareApi~shareShareIdSharePostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ShareResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Number} shareId 
     * @param {Object} opts Optional parameters
     * @param {String} opts.authorization  (default to )
     * @param {module:api/ShareApi~shareShareIdSharePostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ShareResponse}
     */
    this.shareShareIdSharePost = function(shareId, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'shareId' is set
      if (shareId === undefined || shareId === null) {
        throw new Error("Missing the required parameter 'shareId' when calling shareShareIdSharePost");
      }


      var pathParams = {
        'share_id': shareId
      };
      var queryParams = {
      };
      var headerParams = {
        'Authorization': opts['authorization']
      };
      var formParams = {
      };

      var authNames = ['web'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = ShareResponse;

      return this.apiClient.callApi(
        '/share/{share_id}/share', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the shareShareIdTopDelete operation.
     * @callback module:api/ShareApi~shareShareIdTopDeleteCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Success} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Number} shareId 
     * @param {Object} opts Optional parameters
     * @param {String} opts.authorization  (default to )
     * @param {module:api/ShareApi~shareShareIdTopDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Success}
     */
    this.shareShareIdTopDelete = function(shareId, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'shareId' is set
      if (shareId === undefined || shareId === null) {
        throw new Error("Missing the required parameter 'shareId' when calling shareShareIdTopDelete");
      }


      var pathParams = {
        'share_id': shareId
      };
      var queryParams = {
      };
      var headerParams = {
        'Authorization': opts['authorization']
      };
      var formParams = {
      };

      var authNames = ['web'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = Success;

      return this.apiClient.callApi(
        '/share/{share_id}/top', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the shareShareIdTopPost operation.
     * @callback module:api/ShareApi~shareShareIdTopPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Success} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Number} shareId 
     * @param {Object} opts Optional parameters
     * @param {String} opts.authorization  (default to )
     * @param {module:api/ShareApi~shareShareIdTopPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Success}
     */
    this.shareShareIdTopPost = function(shareId, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'shareId' is set
      if (shareId === undefined || shareId === null) {
        throw new Error("Missing the required parameter 'shareId' when calling shareShareIdTopPost");
      }


      var pathParams = {
        'share_id': shareId
      };
      var queryParams = {
      };
      var headerParams = {
        'Authorization': opts['authorization']
      };
      var formParams = {
      };

      var authNames = ['web'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = Success;

      return this.apiClient.callApi(
        '/share/{share_id}/top', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
  };

  return exports;
}));
