/**
 * Mimir
 * APIs
 *
 * OpenAPI spec version: 1.0.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.2.3
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/AvatarString', 'model/Error', 'model/RechargeRequest', 'model/RechargeResponse', 'model/Success', 'model/UserCheckRequest', 'model/UserRequest', 'model/UserResponse', 'model/UserStatusResponse', 'model/UserWithdrawalData'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../model/AvatarString'), require('../model/Error'), require('../model/RechargeRequest'), require('../model/RechargeResponse'), require('../model/Success'), require('../model/UserCheckRequest'), require('../model/UserRequest'), require('../model/UserResponse'), require('../model/UserStatusResponse'), require('../model/UserWithdrawalData'));
  } else {
    // Browser globals (root is window)
    if (!root.Mimir) {
      root.Mimir = {};
    }
    root.Mimir.UserApi = factory(root.Mimir.ApiClient, root.Mimir.AvatarString, root.Mimir.Error, root.Mimir.RechargeRequest, root.Mimir.RechargeResponse, root.Mimir.Success, root.Mimir.UserCheckRequest, root.Mimir.UserRequest, root.Mimir.UserResponse, root.Mimir.UserStatusResponse, root.Mimir.UserWithdrawalData);
  }
}(this, function(ApiClient, AvatarString, Error, RechargeRequest, RechargeResponse, Success, UserCheckRequest, UserRequest, UserResponse, UserStatusResponse, UserWithdrawalData) {
  'use strict';

  /**
   * User service.
   * @module api/UserApi
   * @version 1.0.0
   */

  /**
   * Constructs a new UserApi. 
   * @alias module:api/UserApi
   * @class
   * @param {module:ApiClient} apiClient Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;


    /**
     * Callback function to receive the result of the userUidAvatarPut operation.
     * @callback module:api/UserApi~userUidAvatarPutCallback
     * @param {String} error Error message, if any.
     * @param {module:model/UserResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} uid 
     * @param {module:model/AvatarString} avatar 
     * @param {Object} opts Optional parameters
     * @param {String} opts.authorization  (default to )
     * @param {module:api/UserApi~userUidAvatarPutCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/UserResponse}
     */
    this.userUidAvatarPut = function(uid, avatar, opts, callback) {
      opts = opts || {};
      var postBody = avatar;

      // verify the required parameter 'uid' is set
      if (uid === undefined || uid === null) {
        throw new Error("Missing the required parameter 'uid' when calling userUidAvatarPut");
      }

      // verify the required parameter 'avatar' is set
      if (avatar === undefined || avatar === null) {
        throw new Error("Missing the required parameter 'avatar' when calling userUidAvatarPut");
      }


      var pathParams = {
        'uid': uid
      };
      var queryParams = {
      };
      var headerParams = {
        'Authorization': opts['authorization']
      };
      var formParams = {
      };

      var authNames = ['web'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = UserResponse;

      return this.apiClient.callApi(
        '/user/{uid}/avatar', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the userUidCheckGet operation.
     * @callback module:api/UserApi~userUidCheckGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/UserResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} uid 
     * @param {Object} opts Optional parameters
     * @param {String} opts.authorization  (default to )
     * @param {module:api/UserApi~userUidCheckGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/UserResponse}
     */
    this.userUidCheckGet = function(uid, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'uid' is set
      if (uid === undefined || uid === null) {
        throw new Error("Missing the required parameter 'uid' when calling userUidCheckGet");
      }


      var pathParams = {
        'uid': uid
      };
      var queryParams = {
      };
      var headerParams = {
        'Authorization': opts['authorization']
      };
      var formParams = {
      };

      var authNames = ['web'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = UserResponse;

      return this.apiClient.callApi(
        '/user/{uid}/check', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the userUidCheckPost operation.
     * @callback module:api/UserApi~userUidCheckPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Success} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {module:model/UserCheckRequest} user 
     * @param {String} uid 
     * @param {Object} opts Optional parameters
     * @param {String} opts.authorization  (default to )
     * @param {module:api/UserApi~userUidCheckPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Success}
     */
    this.userUidCheckPost = function(user, uid, opts, callback) {
      opts = opts || {};
      var postBody = user;

      // verify the required parameter 'user' is set
      if (user === undefined || user === null) {
        throw new Error("Missing the required parameter 'user' when calling userUidCheckPost");
      }

      // verify the required parameter 'uid' is set
      if (uid === undefined || uid === null) {
        throw new Error("Missing the required parameter 'uid' when calling userUidCheckPost");
      }


      var pathParams = {
        'uid': uid
      };
      var queryParams = {
      };
      var headerParams = {
        'Authorization': opts['authorization']
      };
      var formParams = {
      };

      var authNames = ['web'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = Success;

      return this.apiClient.callApi(
        '/user/{uid}/check', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the userUidGet operation.
     * @callback module:api/UserApi~userUidGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/UserResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} uid 
     * @param {Object} opts Optional parameters
     * @param {String} opts.authorization  (default to )
     * @param {Boolean} opts.update  (default to false)
     * @param {module:api/UserApi~userUidGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/UserResponse}
     */
    this.userUidGet = function(uid, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'uid' is set
      if (uid === undefined || uid === null) {
        throw new Error("Missing the required parameter 'uid' when calling userUidGet");
      }


      var pathParams = {
        'uid': uid
      };
      var queryParams = {
        'update': opts['update']
      };
      var headerParams = {
        'Authorization': opts['authorization']
      };
      var formParams = {
      };

      var authNames = ['web'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = UserResponse;

      return this.apiClient.callApi(
        '/user/{uid}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the userUidPayPost operation.
     * @callback module:api/UserApi~userUidPayPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/RechargeResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {module:model/RechargeRequest} pay 
     * @param {String} uid 
     * @param {Object} opts Optional parameters
     * @param {String} opts.authorization  (default to )
     * @param {module:api/UserApi~userUidPayPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/RechargeResponse}
     */
    this.userUidPayPost = function(pay, uid, opts, callback) {
      opts = opts || {};
      var postBody = pay;

      // verify the required parameter 'pay' is set
      if (pay === undefined || pay === null) {
        throw new Error("Missing the required parameter 'pay' when calling userUidPayPost");
      }

      // verify the required parameter 'uid' is set
      if (uid === undefined || uid === null) {
        throw new Error("Missing the required parameter 'uid' when calling userUidPayPost");
      }


      var pathParams = {
        'uid': uid
      };
      var queryParams = {
      };
      var headerParams = {
        'Authorization': opts['authorization']
      };
      var formParams = {
      };

      var authNames = ['web'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = RechargeResponse;

      return this.apiClient.callApi(
        '/user/{uid}/pay', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the userUidPut operation.
     * @callback module:api/UserApi~userUidPutCallback
     * @param {String} error Error message, if any.
     * @param {module:model/UserResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} uid 
     * @param {module:model/UserRequest} user 
     * @param {Object} opts Optional parameters
     * @param {String} opts.authorization  (default to )
     * @param {module:api/UserApi~userUidPutCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/UserResponse}
     */
    this.userUidPut = function(uid, user, opts, callback) {
      opts = opts || {};
      var postBody = user;

      // verify the required parameter 'uid' is set
      if (uid === undefined || uid === null) {
        throw new Error("Missing the required parameter 'uid' when calling userUidPut");
      }

      // verify the required parameter 'user' is set
      if (user === undefined || user === null) {
        throw new Error("Missing the required parameter 'user' when calling userUidPut");
      }


      var pathParams = {
        'uid': uid
      };
      var queryParams = {
      };
      var headerParams = {
        'Authorization': opts['authorization']
      };
      var formParams = {
      };

      var authNames = ['web'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = UserResponse;

      return this.apiClient.callApi(
        '/user/{uid}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the userUidStatusGet operation.
     * @callback module:api/UserApi~userUidStatusGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/UserStatusResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} uid 
     * @param {Object} opts Optional parameters
     * @param {String} opts.authorization  (default to )
     * @param {module:api/UserApi~userUidStatusGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/UserStatusResponse}
     */
    this.userUidStatusGet = function(uid, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'uid' is set
      if (uid === undefined || uid === null) {
        throw new Error("Missing the required parameter 'uid' when calling userUidStatusGet");
      }


      var pathParams = {
        'uid': uid
      };
      var queryParams = {
      };
      var headerParams = {
        'Authorization': opts['authorization']
      };
      var formParams = {
      };

      var authNames = ['web'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = UserStatusResponse;

      return this.apiClient.callApi(
        '/user/{uid}/status', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the userUidWithdrawalGet operation.
     * @callback module:api/UserApi~userUidWithdrawalGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/UserWithdrawalData} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} uid 
     * @param {Object} opts Optional parameters
     * @param {String} opts.authorization  (default to )
     * @param {module:api/UserApi~userUidWithdrawalGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/UserWithdrawalData}
     */
    this.userUidWithdrawalGet = function(uid, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'uid' is set
      if (uid === undefined || uid === null) {
        throw new Error("Missing the required parameter 'uid' when calling userUidWithdrawalGet");
      }


      var pathParams = {
        'uid': uid
      };
      var queryParams = {
      };
      var headerParams = {
        'Authorization': opts['authorization']
      };
      var formParams = {
      };

      var authNames = ['web'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = UserWithdrawalData;

      return this.apiClient.callApi(
        '/user/{uid}/withdrawal', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the usersGet operation.
     * @callback module:api/UserApi~usersGetCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/UserResponse>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {String} opts.authorization  (default to )
     * @param {Number} opts.limit max records to return (default to 20)
     * @param {Number} opts.page page number (default to 1)
     * @param {module:api/UserApi~usersGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/UserResponse>}
     */
    this.usersGet = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'limit': opts['limit'],
        'page': opts['page']
      };
      var headerParams = {
        'Authorization': opts['authorization']
      };
      var formParams = {
      };

      var authNames = ['web'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = [UserResponse];

      return this.apiClient.callApi(
        '/users', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
  };

  return exports;
}));
