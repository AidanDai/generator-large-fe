/**
 * Mimir
 * APIs
 *
 * OpenAPI spec version: 1.0.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.2.3
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/Error', 'model/InviteApplicationResponse', 'model/InviteCodeRequest', 'model/InviteCodeResponse', 'model/InviteCodeStatus', 'model/MemberUserResponse', 'model/Success'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../model/Error'), require('../model/InviteApplicationResponse'), require('../model/InviteCodeRequest'), require('../model/InviteCodeResponse'), require('../model/InviteCodeStatus'), require('../model/MemberUserResponse'), require('../model/Success'));
  } else {
    // Browser globals (root is window)
    if (!root.Mimir) {
      root.Mimir = {};
    }
    root.Mimir.InvitationApi = factory(root.Mimir.ApiClient, root.Mimir.Error, root.Mimir.InviteApplicationResponse, root.Mimir.InviteCodeRequest, root.Mimir.InviteCodeResponse, root.Mimir.InviteCodeStatus, root.Mimir.MemberUserResponse, root.Mimir.Success);
  }
}(this, function(ApiClient, Error, InviteApplicationResponse, InviteCodeRequest, InviteCodeResponse, InviteCodeStatus, MemberUserResponse, Success) {
  'use strict';

  /**
   * Invitation service.
   * @module api/InvitationApi
   * @version 1.0.0
   */

  /**
   * Constructs a new InvitationApi. 
   * @alias module:api/InvitationApi
   * @class
   * @param {module:ApiClient} apiClient Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;


    /**
     * Callback function to receive the result of the groupGroupIdInvitationInviteCodeGet operation.
     * @callback module:api/InvitationApi~groupGroupIdInvitationInviteCodeGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InviteCodeStatus} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Number} groupId 
     * @param {String} inviteCode 
     * @param {module:api/InvitationApi~groupGroupIdInvitationInviteCodeGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InviteCodeStatus}
     */
    this.groupGroupIdInvitationInviteCodeGet = function(groupId, inviteCode, callback) {
      var postBody = null;

      // verify the required parameter 'groupId' is set
      if (groupId === undefined || groupId === null) {
        throw new Error("Missing the required parameter 'groupId' when calling groupGroupIdInvitationInviteCodeGet");
      }

      // verify the required parameter 'inviteCode' is set
      if (inviteCode === undefined || inviteCode === null) {
        throw new Error("Missing the required parameter 'inviteCode' when calling groupGroupIdInvitationInviteCodeGet");
      }


      var pathParams = {
        'group_id': groupId,
        'invite_code': inviteCode
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['web'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = InviteCodeStatus;

      return this.apiClient.callApi(
        '/group/{group_id}/invitation/{invite_code}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the groupGroupIdInvitationInviteCodePost operation.
     * @callback module:api/InvitationApi~groupGroupIdInvitationInviteCodePostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Success} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Number} groupId 
     * @param {String} inviteCode 
     * @param {Object} opts Optional parameters
     * @param {String} opts.authorization  (default to )
     * @param {module:api/InvitationApi~groupGroupIdInvitationInviteCodePostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Success}
     */
    this.groupGroupIdInvitationInviteCodePost = function(groupId, inviteCode, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'groupId' is set
      if (groupId === undefined || groupId === null) {
        throw new Error("Missing the required parameter 'groupId' when calling groupGroupIdInvitationInviteCodePost");
      }

      // verify the required parameter 'inviteCode' is set
      if (inviteCode === undefined || inviteCode === null) {
        throw new Error("Missing the required parameter 'inviteCode' when calling groupGroupIdInvitationInviteCodePost");
      }


      var pathParams = {
        'group_id': groupId,
        'invite_code': inviteCode
      };
      var queryParams = {
      };
      var headerParams = {
        'Authorization': opts['authorization']
      };
      var formParams = {
      };

      var authNames = ['web'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = Success;

      return this.apiClient.callApi(
        '/group/{group_id}/invitation/{invite_code}', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the groupGroupIdInvitationsPost operation.
     * @callback module:api/InvitationApi~groupGroupIdInvitationsPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InviteApplicationResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Number} groupId 
     * @param {Object} opts Optional parameters
     * @param {String} opts.authorization  (default to )
     * @param {module:api/InvitationApi~groupGroupIdInvitationsPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InviteApplicationResponse}
     */
    this.groupGroupIdInvitationsPost = function(groupId, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'groupId' is set
      if (groupId === undefined || groupId === null) {
        throw new Error("Missing the required parameter 'groupId' when calling groupGroupIdInvitationsPost");
      }


      var pathParams = {
        'group_id': groupId
      };
      var queryParams = {
      };
      var headerParams = {
        'Authorization': opts['authorization']
      };
      var formParams = {
      };

      var authNames = ['web'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = InviteApplicationResponse;

      return this.apiClient.callApi(
        '/group/{group_id}/invitations', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the groupGroupIdInviteCodeFunsGet operation.
     * @callback module:api/InvitationApi~groupGroupIdInviteCodeFunsGetCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/InviteCodeResponse>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Number} groupId 
     * @param {Object} opts Optional parameters
     * @param {String} opts.authorization  (default to )
     * @param {String} opts.reason 
     * @param {Number} opts.limit max records to return (default to 20)
     * @param {Number} opts.page page number (default to 1)
     * @param {module:api/InvitationApi~groupGroupIdInviteCodeFunsGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/InviteCodeResponse>}
     */
    this.groupGroupIdInviteCodeFunsGet = function(groupId, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'groupId' is set
      if (groupId === undefined || groupId === null) {
        throw new Error("Missing the required parameter 'groupId' when calling groupGroupIdInviteCodeFunsGet");
      }


      var pathParams = {
        'group_id': groupId
      };
      var queryParams = {
        'reason': opts['reason'],
        'limit': opts['limit'],
        'page': opts['page']
      };
      var headerParams = {
        'Authorization': opts['authorization']
      };
      var formParams = {
      };

      var authNames = ['web'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = [InviteCodeResponse];

      return this.apiClient.callApi(
        '/group/{group_id}/invite_code/funs', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the guestGuestIdDelete operation.
     * @callback module:api/InvitationApi~guestGuestIdDeleteCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Success} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Number} guestId 
     * @param {Object} opts Optional parameters
     * @param {String} opts.authorization  (default to )
     * @param {module:api/InvitationApi~guestGuestIdDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Success}
     */
    this.guestGuestIdDelete = function(guestId, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'guestId' is set
      if (guestId === undefined || guestId === null) {
        throw new Error("Missing the required parameter 'guestId' when calling guestGuestIdDelete");
      }


      var pathParams = {
        'guest_id': guestId
      };
      var queryParams = {
      };
      var headerParams = {
        'Authorization': opts['authorization']
      };
      var formParams = {
      };

      var authNames = ['web'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = Success;

      return this.apiClient.callApi(
        '/guest/{guest_id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the invitationInvitationIdActionPost operation.
     * @callback module:api/InvitationApi~invitationInvitationIdActionPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/MemberUserResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Number} invitationId 
     * @param {module:model/String} action 
     * @param {Object} opts Optional parameters
     * @param {String} opts.authorization  (default to )
     * @param {module:api/InvitationApi~invitationInvitationIdActionPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/MemberUserResponse}
     */
    this.invitationInvitationIdActionPost = function(invitationId, action, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'invitationId' is set
      if (invitationId === undefined || invitationId === null) {
        throw new Error("Missing the required parameter 'invitationId' when calling invitationInvitationIdActionPost");
      }

      // verify the required parameter 'action' is set
      if (action === undefined || action === null) {
        throw new Error("Missing the required parameter 'action' when calling invitationInvitationIdActionPost");
      }


      var pathParams = {
        'invitation_id': invitationId,
        'action': action
      };
      var queryParams = {
      };
      var headerParams = {
        'Authorization': opts['authorization']
      };
      var formParams = {
      };

      var authNames = ['web'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = MemberUserResponse;

      return this.apiClient.callApi(
        '/invitation/{invitation_id}/{action}', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the inviteCodeCodeVerifyGet operation.
     * @callback module:api/InvitationApi~inviteCodeCodeVerifyGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InviteCodeResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} code 
     * @param {Object} opts Optional parameters
     * @param {String} opts.authorization  (default to )
     * @param {module:api/InvitationApi~inviteCodeCodeVerifyGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InviteCodeResponse}
     */
    this.inviteCodeCodeVerifyGet = function(code, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'code' is set
      if (code === undefined || code === null) {
        throw new Error("Missing the required parameter 'code' when calling inviteCodeCodeVerifyGet");
      }


      var pathParams = {
        'code': code
      };
      var queryParams = {
      };
      var headerParams = {
        'Authorization': opts['authorization']
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = InviteCodeResponse;

      return this.apiClient.callApi(
        '/invite_code/{code}/verify', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the inviteCodePost operation.
     * @callback module:api/InvitationApi~inviteCodePostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InviteCodeResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {module:model/InviteCodeRequest} opts.inviteCode 
     * @param {String} opts.authorization  (default to )
     * @param {module:api/InvitationApi~inviteCodePostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InviteCodeResponse}
     */
    this.inviteCodePost = function(opts, callback) {
      opts = opts || {};
      var postBody = opts['inviteCode'];


      var pathParams = {
      };
      var queryParams = {
      };
      var headerParams = {
        'Authorization': opts['authorization']
      };
      var formParams = {
      };

      var authNames = ['web'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = InviteCodeResponse;

      return this.apiClient.callApi(
        '/invite_code', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
  };

  return exports;
}));
