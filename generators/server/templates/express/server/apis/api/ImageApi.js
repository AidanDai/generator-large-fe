/**
 * Mimir
 * APIs
 *
 * OpenAPI spec version: 1.0.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.2.3
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/Error', 'model/PfopNotifyRequest', 'model/PfopNotifyResponse', 'model/QiniuTokenResponse'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../model/Error'), require('../model/PfopNotifyRequest'), require('../model/PfopNotifyResponse'), require('../model/QiniuTokenResponse'));
  } else {
    // Browser globals (root is window)
    if (!root.Mimir) {
      root.Mimir = {};
    }
    root.Mimir.ImageApi = factory(root.Mimir.ApiClient, root.Mimir.Error, root.Mimir.PfopNotifyRequest, root.Mimir.PfopNotifyResponse, root.Mimir.QiniuTokenResponse);
  }
}(this, function(ApiClient, Error, PfopNotifyRequest, PfopNotifyResponse, QiniuTokenResponse) {
  'use strict';

  /**
   * Image service.
   * @module api/ImageApi
   * @version 1.0.0
   */

  /**
   * Constructs a new ImageApi. 
   * @alias module:api/ImageApi
   * @class
   * @param {module:ApiClient} apiClient Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;


    /**
     * Callback function to receive the result of the qiniuNotifyPost operation.
     * @callback module:api/ImageApi~qiniuNotifyPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PfopNotifyResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {module:model/PfopNotifyRequest} content 
     * @param {module:api/ImageApi~qiniuNotifyPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PfopNotifyResponse}
     */
    this.qiniuNotifyPost = function(content, callback) {
      var postBody = content;

      // verify the required parameter 'content' is set
      if (content === undefined || content === null) {
        throw new Error("Missing the required parameter 'content' when calling qiniuNotifyPost");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = PfopNotifyResponse;

      return this.apiClient.callApi(
        '/qiniu/notify', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the qiniuTokenGet operation.
     * @callback module:api/ImageApi~qiniuTokenGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/QiniuTokenResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {module:model/String} media 
     * @param {Object} opts Optional parameters
     * @param {String} opts.authorization  (default to )
     * @param {module:api/ImageApi~qiniuTokenGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/QiniuTokenResponse}
     */
    this.qiniuTokenGet = function(media, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'media' is set
      if (media === undefined || media === null) {
        throw new Error("Missing the required parameter 'media' when calling qiniuTokenGet");
      }


      var pathParams = {
      };
      var queryParams = {
        'media': media
      };
      var headerParams = {
        'Authorization': opts['authorization']
      };
      var formParams = {
      };

      var authNames = ['web'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = QiniuTokenResponse;

      return this.apiClient.callApi(
        '/qiniu/token', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the qiniuVideoSnapshotNotifyPost operation.
     * @callback module:api/ImageApi~qiniuVideoSnapshotNotifyPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PfopNotifyResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {module:model/PfopNotifyRequest} content 
     * @param {module:api/ImageApi~qiniuVideoSnapshotNotifyPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PfopNotifyResponse}
     */
    this.qiniuVideoSnapshotNotifyPost = function(content, callback) {
      var postBody = content;

      // verify the required parameter 'content' is set
      if (content === undefined || content === null) {
        throw new Error("Missing the required parameter 'content' when calling qiniuVideoSnapshotNotifyPost");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = PfopNotifyResponse;

      return this.apiClient.callApi(
        '/qiniu/video/snapshot/notify', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
  };

  return exports;
}));
