/**
 * Mimir
 * APIs
 *
 * OpenAPI spec version: 1.0.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.2.3
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/Error', 'model/NotificationResponse', 'model/Success', 'model/UnreadNotificationCount'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../model/Error'), require('../model/NotificationResponse'), require('../model/Success'), require('../model/UnreadNotificationCount'));
  } else {
    // Browser globals (root is window)
    if (!root.Mimir) {
      root.Mimir = {};
    }
    root.Mimir.NotificationApi = factory(root.Mimir.ApiClient, root.Mimir.Error, root.Mimir.NotificationResponse, root.Mimir.Success, root.Mimir.UnreadNotificationCount);
  }
}(this, function(ApiClient, Error, NotificationResponse, Success, UnreadNotificationCount) {
  'use strict';

  /**
   * Notification service.
   * @module api/NotificationApi
   * @version 1.0.0
   */

  /**
   * Constructs a new NotificationApi. 
   * @alias module:api/NotificationApi
   * @class
   * @param {module:ApiClient} apiClient Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;


    /**
     * Callback function to receive the result of the notificationNotificationIdClickedPost operation.
     * @callback module:api/NotificationApi~notificationNotificationIdClickedPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/NotificationResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} notificationId 
     * @param {module:api/NotificationApi~notificationNotificationIdClickedPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/NotificationResponse}
     */
    this.notificationNotificationIdClickedPost = function(notificationId, callback) {
      var postBody = null;

      // verify the required parameter 'notificationId' is set
      if (notificationId === undefined || notificationId === null) {
        throw new Error("Missing the required parameter 'notificationId' when calling notificationNotificationIdClickedPost");
      }


      var pathParams = {
        'notification_id': notificationId
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['web'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = NotificationResponse;

      return this.apiClient.callApi(
        '/notification/{notification_id}/clicked', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the userUidNotificationsGet operation.
     * @callback module:api/NotificationApi~userUidNotificationsGetCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/NotificationResponse>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} uid 
     * @param {Object} opts Optional parameters
     * @param {String} opts.authorization  (default to )
     * @param {Number} opts.limit max records to return (default to 20)
     * @param {Date} opts.createdAt cursor for pagination
     * @param {Number} opts.notificationId cursor for pagination
     * @param {Boolean} opts.unread pass unread&#x3D;1 to fetch unread notifications
     * @param {module:api/NotificationApi~userUidNotificationsGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/NotificationResponse>}
     */
    this.userUidNotificationsGet = function(uid, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'uid' is set
      if (uid === undefined || uid === null) {
        throw new Error("Missing the required parameter 'uid' when calling userUidNotificationsGet");
      }


      var pathParams = {
        'uid': uid
      };
      var queryParams = {
        'limit': opts['limit'],
        'created_at': opts['createdAt'],
        'notification_id': opts['notificationId'],
        'unread': opts['unread']
      };
      var headerParams = {
        'Authorization': opts['authorization']
      };
      var formParams = {
      };

      var authNames = ['web'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = [NotificationResponse];

      return this.apiClient.callApi(
        '/user/{uid}/notifications', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the userUidNotificationsUnreadCountGet operation.
     * @callback module:api/NotificationApi~userUidNotificationsUnreadCountGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/UnreadNotificationCount} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} uid 
     * @param {Object} opts Optional parameters
     * @param {String} opts.authorization  (default to )
     * @param {module:api/NotificationApi~userUidNotificationsUnreadCountGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/UnreadNotificationCount}
     */
    this.userUidNotificationsUnreadCountGet = function(uid, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'uid' is set
      if (uid === undefined || uid === null) {
        throw new Error("Missing the required parameter 'uid' when calling userUidNotificationsUnreadCountGet");
      }


      var pathParams = {
        'uid': uid
      };
      var queryParams = {
      };
      var headerParams = {
        'Authorization': opts['authorization']
      };
      var formParams = {
      };

      var authNames = ['web'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = UnreadNotificationCount;

      return this.apiClient.callApi(
        '/user/{uid}/notifications/unread_count', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the userUidReadNotificationsPost operation.
     * @callback module:api/NotificationApi~userUidReadNotificationsPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Success} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} uid 
     * @param {Object} opts Optional parameters
     * @param {String} opts.authorization  (default to )
     * @param {module:api/NotificationApi~userUidReadNotificationsPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Success}
     */
    this.userUidReadNotificationsPost = function(uid, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'uid' is set
      if (uid === undefined || uid === null) {
        throw new Error("Missing the required parameter 'uid' when calling userUidReadNotificationsPost");
      }


      var pathParams = {
        'uid': uid
      };
      var queryParams = {
      };
      var headerParams = {
        'Authorization': opts['authorization']
      };
      var formParams = {
      };

      var authNames = ['web'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = Success;

      return this.apiClient.callApi(
        '/user/{uid}/read_notifications', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
  };

  return exports;
}));
