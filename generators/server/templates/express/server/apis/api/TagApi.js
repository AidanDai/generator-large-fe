/**
 * Mimir
 * APIs
 *
 * OpenAPI spec version: 1.0.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.2.3
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/Error', 'model/Success', 'model/TagRequest', 'model/TagResponse'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../model/Error'), require('../model/Success'), require('../model/TagRequest'), require('../model/TagResponse'));
  } else {
    // Browser globals (root is window)
    if (!root.Mimir) {
      root.Mimir = {};
    }
    root.Mimir.TagApi = factory(root.Mimir.ApiClient, root.Mimir.Error, root.Mimir.Success, root.Mimir.TagRequest, root.Mimir.TagResponse);
  }
}(this, function(ApiClient, Error, Success, TagRequest, TagResponse) {
  'use strict';

  /**
   * Tag service.
   * @module api/TagApi
   * @version 1.0.0
   */

  /**
   * Constructs a new TagApi. 
   * @alias module:api/TagApi
   * @class
   * @param {module:ApiClient} apiClient Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;


    /**
     * Callback function to receive the result of the groupGroupIdTagsGet operation.
     * @callback module:api/TagApi~groupGroupIdTagsGetCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/TagResponse>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Number} groupId 
     * @param {Object} opts Optional parameters
     * @param {String} opts.authorization  (default to )
     * @param {Number} opts.limit max records to return (default to 20)
     * @param {Number} opts.page page number (default to 1)
     * @param {module:api/TagApi~groupGroupIdTagsGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/TagResponse>}
     */
    this.groupGroupIdTagsGet = function(groupId, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'groupId' is set
      if (groupId === undefined || groupId === null) {
        throw new Error("Missing the required parameter 'groupId' when calling groupGroupIdTagsGet");
      }


      var pathParams = {
        'group_id': groupId
      };
      var queryParams = {
        'limit': opts['limit'],
        'page': opts['page']
      };
      var headerParams = {
        'Authorization': opts['authorization']
      };
      var formParams = {
      };

      var authNames = ['web'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = [TagResponse];

      return this.apiClient.callApi(
        '/group/{group_id}/tags', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the groupGroupIdTagsPost operation.
     * @callback module:api/TagApi~groupGroupIdTagsPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/TagResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Number} groupId 
     * @param {module:model/TagRequest} tag 
     * @param {Object} opts Optional parameters
     * @param {String} opts.authorization  (default to )
     * @param {module:api/TagApi~groupGroupIdTagsPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/TagResponse}
     */
    this.groupGroupIdTagsPost = function(groupId, tag, opts, callback) {
      opts = opts || {};
      var postBody = tag;

      // verify the required parameter 'groupId' is set
      if (groupId === undefined || groupId === null) {
        throw new Error("Missing the required parameter 'groupId' when calling groupGroupIdTagsPost");
      }

      // verify the required parameter 'tag' is set
      if (tag === undefined || tag === null) {
        throw new Error("Missing the required parameter 'tag' when calling groupGroupIdTagsPost");
      }


      var pathParams = {
        'group_id': groupId
      };
      var queryParams = {
      };
      var headerParams = {
        'Authorization': opts['authorization']
      };
      var formParams = {
      };

      var authNames = ['web'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = TagResponse;

      return this.apiClient.callApi(
        '/group/{group_id}/tags', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the tagTagIdDelete operation.
     * @callback module:api/TagApi~tagTagIdDeleteCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Success} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Number} tagId 
     * @param {Object} opts Optional parameters
     * @param {String} opts.authorization  (default to )
     * @param {module:api/TagApi~tagTagIdDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Success}
     */
    this.tagTagIdDelete = function(tagId, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'tagId' is set
      if (tagId === undefined || tagId === null) {
        throw new Error("Missing the required parameter 'tagId' when calling tagTagIdDelete");
      }


      var pathParams = {
        'tag_id': tagId
      };
      var queryParams = {
      };
      var headerParams = {
        'Authorization': opts['authorization']
      };
      var formParams = {
      };

      var authNames = ['web'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = Success;

      return this.apiClient.callApi(
        '/tag/{tag_id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the tagTagIdPut operation.
     * @callback module:api/TagApi~tagTagIdPutCallback
     * @param {String} error Error message, if any.
     * @param {module:model/TagResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Number} tagId 
     * @param {module:model/TagRequest} tag 
     * @param {Object} opts Optional parameters
     * @param {String} opts.authorization  (default to )
     * @param {module:api/TagApi~tagTagIdPutCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/TagResponse}
     */
    this.tagTagIdPut = function(tagId, tag, opts, callback) {
      opts = opts || {};
      var postBody = tag;

      // verify the required parameter 'tagId' is set
      if (tagId === undefined || tagId === null) {
        throw new Error("Missing the required parameter 'tagId' when calling tagTagIdPut");
      }

      // verify the required parameter 'tag' is set
      if (tag === undefined || tag === null) {
        throw new Error("Missing the required parameter 'tag' when calling tagTagIdPut");
      }


      var pathParams = {
        'tag_id': tagId
      };
      var queryParams = {
      };
      var headerParams = {
        'Authorization': opts['authorization']
      };
      var formParams = {
      };

      var authNames = ['web'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = TagResponse;

      return this.apiClient.callApi(
        '/tag/{tag_id}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
  };

  return exports;
}));
